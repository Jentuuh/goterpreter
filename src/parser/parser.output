Terminals unused in grammar

    NEWLINE
    IMPORT
    SHORTVARASSIGN


State 112 conflicts: 1 shift/reduce
State 113 conflicts: 1 shift/reduce


Grammar

    0 $accept: sourcefile $end

    1 sourcefile: packageclause SEMICOLON topleveldeclarations
    2           | packageclause SEMICOLON

    3 topleveldeclarations: topleveldecl SEMICOLON topleveldeclarations
    4                     | topleveldecl SEMICOLON

    5 packageclause: PACKAGE packagename

    6 packagename: IDENTIFIER

    7 topleveldecl: declaration
    8             | functiondeclaration

    9 declaration: vardecl

   10 vardecl: VAR LPAREN varspeclist RPAREN
   11        | VAR varspec

   12 varspeclist: varspec
   13            | varspec SEMICOLON varspeclist

   14 varspec: identifierlist type ASSIGN expressionlist
   15        | identifierlist type
   16        | identifierlist ASSIGN expressionlist

   17 functiondeclaration: FUNC functionname signature functionbody

   18 functionname: IDENTIFIER

   19 functionbody: block

   20 signature: parameters result
   21          | parameters

   22 type: typename
   23     | LPAREN type RPAREN

   24 typelist: type
   25         | LPAREN typename COMMA typelist RPAREN

   26 typename: INTEGER
   27         | BOOLEAN

   28 result: parameters
   29       | typelist

   30 parameters: LPAREN RPAREN
   31           | LPAREN parameterlist COMMA RPAREN
   32           | LPAREN parameterlist RPAREN

   33 parameterlist: parameterlist COMMA parameterdecl
   34              | parameterdecl

   35 parameterdecl: identifierlist type
   36              | type

   37 expr: unaryexpr
   38     | expr EQ expr
   39     | expr NE expr
   40     | expr LT expr
   41     | expr LE expr
   42     | expr GT expr
   43     | expr GE expr
   44     | expr MUL expr
   45     | expr DIV expr
   46     | expr PLUS expr
   47     | expr MIN expr
   48     | expr OR expr
   49     | expr AND expr

   50 expressionlist: expressionlist COMMA expr
   51               | expr

   52 identifierlist: identifier COMMA identifierlist
   53               | identifier

   54 identifier: IDENTIFIER

   55 unaryexpr: primaryexpr
   56          | unary_op unaryexpr

   57 unary_op: PLUS
   58         | MIN
   59         | NOT

   60 operand: literal
   61        | operandname
   62        | LPAREN expr RPAREN

   63 literal: basiclit

   64 basiclit: INTLITERAL
   65         | BOOLLITERAL

   66 operandname: IDENTIFIER

   67 primaryexpr: operand
   68            | primaryexpr arguments

   69 arguments: LPAREN RPAREN
   70          | LPAREN expressionlist RPAREN
   71          | LPAREN expressionlist RCOMMA RPAREN

   72 block: LBRACE statementlist RBRACE

   73 statementlist: statement SEMICOLON
   74              | statement SEMICOLON statementlist

   75 statement: declaration
   76          | block
   77          | ifstatement
   78          | forstatement
   79          | returnstatement
   80          | simplestatement
   81          | printstatement

   82 simplestatement: expressionstatement
   83                | assignment
   84                | incdecstatement
   85                | emptystatement

   86 emptystatement: ε

   87 expressionstatement: expr

   88 assignment: expressionlist assign_op expressionlist

   89 assign_op: ASSIGN
   90          | PLUSASSIGN
   91          | MINASSIGN
   92          | MULASSIGN
   93          | DIVASSIGN

   94 incdecstatement: expr INC
   95                | expr DEC

   96 ifstatement: IF simplestatement SEMICOLON expr block ELSE ifstatement
   97            | IF simplestatement SEMICOLON expr block ELSE block
   98            | IF expr block ELSE ifstatement
   99            | IF expr block ELSE block
  100            | IF expr block

  101 forstatement: FOR condition block
  102             | FOR forclause block
  103             | FOR block

  104 condition: expr

  105 forclause: initstatement SEMICOLON condition SEMICOLON poststatement
  106          | initstatement SEMICOLON condition RSEMICOL
  107          | RSEMICOL condition RSEMICOL poststatement

  108 initstatement: simplestatement

  109 poststatement: simplestatement

  110 printstatement: PRINT LPAREN expressionlist RPAREN

  111 returnstatement: RETURN expressionlist
  112                | RETURN


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    SEMICOLON (258) 1 2 3 4 13 73 74 96 97 105 106
    INTEGER (259) 26
    BOOLEAN (260) 27
    PACKAGE (261) 5
    RETURN (262) 111 112
    VAR (263) 10 11
    IF (264) 96 97 98 99 100
    FOR (265) 101 102 103
    LPAREN (266) 10 23 25 30 31 32 62 69 70 71 110
    RPAREN (267) 10 23 25 30 31 32 62 69 70 71 110
    LBRACE (268) 72
    RBRACE (269) 72
    PLUS (270) 46 57
    MIN (271) 47 58
    MUL (272) 44
    DIV (273) 45
    PLUSASSIGN (274) 90
    MINASSIGN (275) 91
    MULASSIGN (276) 92
    DIVASSIGN (277) 93
    AND (278) 49
    OR (279) 48
    NOT (280) 59
    INC (281) 94
    DEC (282) 95
    GT (283) 42
    GE (284) 43
    LT (285) 40
    LE (286) 41
    EQ (287) 38
    NE (288) 39
    ASSIGN (289) 14 16 89
    FUNC (290) 17
    NEWLINE (291)
    IMPORT (292)
    COMMA (293) 25 31 33 50 52
    ELSE (294) 96 97 98 99
    SHORTVARASSIGN (295)
    PRINT (296) 110
    IDENTIFIER <id> (297) 6 18 54 66
    BOOLLITERAL <boollit> (298) 65
    INTLITERAL <intlit> (299) 64
    RSEMICOL (300) 106 107
    RCOMMA (301) 71
    UMINUS (302)


Nonterminals, with rules where they appear

    $accept (48)
        on left: 0
    sourcefile <srcfile> (49)
        on left: 1 2
        on right: 0
    topleveldeclarations <decllist> (50)
        on left: 3 4
        on right: 1 3
    packageclause <packageclause> (51)
        on left: 5
        on right: 1 2
    packagename <identifier> (52)
        on left: 6
        on right: 5
    topleveldecl <toplvldecl> (53)
        on left: 7 8
        on right: 3 4
    declaration <toplvldecl> (54)
        on left: 9
        on right: 7 75
    vardecl <toplvldecl> (55)
        on left: 10 11
        on right: 9
    varspeclist <varspeclist> (56)
        on left: 12 13
        on right: 10 13
    varspec <varspec> (57)
        on left: 14 15 16
        on right: 11 12 13
    functiondeclaration <toplvldecl> (58)
        on left: 17
        on right: 8
    functionname <identifier> (59)
        on left: 18
        on right: 17
    functionbody <block> (60)
        on left: 19
        on right: 17
    signature <signature> (61)
        on left: 20 21
        on right: 17
    type <type> (62)
        on left: 22 23
        on right: 14 15 23 24 35 36
    typelist <typelist> (63)
        on left: 24 25
        on right: 25 29
    typename <type> (64)
        on left: 26 27
        on right: 22 25
    result <result> (65)
        on left: 28 29
        on right: 20
    parameters <paramlist> (66)
        on left: 30 31 32
        on right: 20 21 28
    parameterlist <paramlist> (67)
        on left: 33 34
        on right: 31 32 33
    parameterdecl <paramdecl> (68)
        on left: 35 36
        on right: 33 34
    expr <exp> (69)
        on left: 37 38 39 40 41 42 43 44 45 46 47 48 49
        on right: 38 39 40 41 42 43 44 45 46 47 48 49 50 51 62 87 94 95 96 97 98 99 100 104
    expressionlist <explist> (70)
        on left: 50 51
        on right: 14 16 50 70 71 88 110 111
    identifierlist <identifierlist> (71)
        on left: 52 53
        on right: 14 15 16 35 52
    identifier <identifier> (72)
        on left: 54
        on right: 52 53
    unaryexpr <exp> (73)
        on left: 55 56
        on right: 37 56
    unary_op <unaryoperator> (74)
        on left: 57 58 59
        on right: 56
    operand <operand> (75)
        on left: 60 61 62
        on right: 67
    literal <literal> (76)
        on left: 63
        on right: 60
    basiclit <literal> (77)
        on left: 64 65
        on right: 63
    operandname <identifier> (78)
        on left: 66
        on right: 61
    primaryexpr <exp> (79)
        on left: 67 68
        on right: 55 68
    arguments <explist> (80)
        on left: 69 70 71
        on right: 68
    block <block> (81)
        on left: 72
        on right: 19 76 96 97 98 99 100 101 102 103
    statementlist <stmlist> (82)
        on left: 73 74
        on right: 72 74
    statement <stm> (83)
        on left: 75 76 77 78 79 80 81
        on right: 73 74
    simplestatement <stm> (84)
        on left: 82 83 84 85
        on right: 80 96 97 108 109
    emptystatement <stm> (85)
        on left: 86
        on right: 85
    expressionstatement <stm> (86)
        on left: 87
        on right: 82
    assignment <stm> (87)
        on left: 88
        on right: 83
    assign_op <assignoperator> (88)
        on left: 89 90 91 92 93
        on right: 88
    incdecstatement <stm> (89)
        on left: 94 95
        on right: 84
    ifstatement <stm> (90)
        on left: 96 97 98 99 100
        on right: 77 96 98
    forstatement <stm> (91)
        on left: 101 102 103
        on right: 78
    condition <exp> (92)
        on left: 104
        on right: 101 105 106 107
    forclause <forclause> (93)
        on left: 105 106 107
        on right: 102
    initstatement <stm> (94)
        on left: 108
        on right: 105 106
    poststatement <stm> (95)
        on left: 109
        on right: 105 107
    printstatement <stm> (96)
        on left: 110
        on right: 81
    returnstatement <stm> (97)
        on left: 111 112
        on right: 79


State 0

    0 $accept: • sourcefile $end

    PACKAGE  shift, and go to state 1

    sourcefile     go to state 2
    packageclause  go to state 3


State 1

    5 packageclause: PACKAGE • packagename

    IDENTIFIER  shift, and go to state 4

    packagename  go to state 5


State 2

    0 $accept: sourcefile • $end

    $end  shift, and go to state 6


State 3

    1 sourcefile: packageclause • SEMICOLON topleveldeclarations
    2           | packageclause • SEMICOLON

    SEMICOLON  shift, and go to state 7


State 4

    6 packagename: IDENTIFIER •

    $default  reduce using rule 6 (packagename)


State 5

    5 packageclause: PACKAGE packagename •

    $default  reduce using rule 5 (packageclause)


State 6

    0 $accept: sourcefile $end •

    $default  accept


State 7

    1 sourcefile: packageclause SEMICOLON • topleveldeclarations
    2           | packageclause SEMICOLON •

    VAR   shift, and go to state 8
    FUNC  shift, and go to state 9

    $default  reduce using rule 2 (sourcefile)

    topleveldeclarations  go to state 10
    topleveldecl          go to state 11
    declaration           go to state 12
    vardecl               go to state 13
    functiondeclaration   go to state 14


State 8

   10 vardecl: VAR • LPAREN varspeclist RPAREN
   11        | VAR • varspec

    LPAREN      shift, and go to state 15
    IDENTIFIER  shift, and go to state 16

    varspec         go to state 17
    identifierlist  go to state 18
    identifier      go to state 19


State 9

   17 functiondeclaration: FUNC • functionname signature functionbody

    IDENTIFIER  shift, and go to state 20

    functionname  go to state 21


State 10

    1 sourcefile: packageclause SEMICOLON topleveldeclarations •

    $default  reduce using rule 1 (sourcefile)


State 11

    3 topleveldeclarations: topleveldecl • SEMICOLON topleveldeclarations
    4                     | topleveldecl • SEMICOLON

    SEMICOLON  shift, and go to state 22


State 12

    7 topleveldecl: declaration •

    $default  reduce using rule 7 (topleveldecl)


State 13

    9 declaration: vardecl •

    $default  reduce using rule 9 (declaration)


State 14

    8 topleveldecl: functiondeclaration •

    $default  reduce using rule 8 (topleveldecl)


State 15

   10 vardecl: VAR LPAREN • varspeclist RPAREN

    IDENTIFIER  shift, and go to state 16

    varspeclist     go to state 23
    varspec         go to state 24
    identifierlist  go to state 18
    identifier      go to state 19


State 16

   54 identifier: IDENTIFIER •

    $default  reduce using rule 54 (identifier)


State 17

   11 vardecl: VAR varspec •

    $default  reduce using rule 11 (vardecl)


State 18

   14 varspec: identifierlist • type ASSIGN expressionlist
   15        | identifierlist • type
   16        | identifierlist • ASSIGN expressionlist

    INTEGER  shift, and go to state 25
    BOOLEAN  shift, and go to state 26
    LPAREN   shift, and go to state 27
    ASSIGN   shift, and go to state 28

    type      go to state 29
    typename  go to state 30


State 19

   52 identifierlist: identifier • COMMA identifierlist
   53               | identifier •

    COMMA  shift, and go to state 31

    $default  reduce using rule 53 (identifierlist)


State 20

   18 functionname: IDENTIFIER •

    $default  reduce using rule 18 (functionname)


State 21

   17 functiondeclaration: FUNC functionname • signature functionbody

    LPAREN  shift, and go to state 32

    signature   go to state 33
    parameters  go to state 34


State 22

    3 topleveldeclarations: topleveldecl SEMICOLON • topleveldeclarations
    4                     | topleveldecl SEMICOLON •

    VAR   shift, and go to state 8
    FUNC  shift, and go to state 9

    $default  reduce using rule 4 (topleveldeclarations)

    topleveldeclarations  go to state 35
    topleveldecl          go to state 11
    declaration           go to state 12
    vardecl               go to state 13
    functiondeclaration   go to state 14


State 23

   10 vardecl: VAR LPAREN varspeclist • RPAREN

    RPAREN  shift, and go to state 36


State 24

   12 varspeclist: varspec •
   13            | varspec • SEMICOLON varspeclist

    SEMICOLON  shift, and go to state 37

    $default  reduce using rule 12 (varspeclist)


State 25

   26 typename: INTEGER •

    $default  reduce using rule 26 (typename)


State 26

   27 typename: BOOLEAN •

    $default  reduce using rule 27 (typename)


State 27

   23 type: LPAREN • type RPAREN

    INTEGER  shift, and go to state 25
    BOOLEAN  shift, and go to state 26
    LPAREN   shift, and go to state 27

    type      go to state 38
    typename  go to state 30


State 28

   16 varspec: identifierlist ASSIGN • expressionlist

    LPAREN       shift, and go to state 39
    PLUS         shift, and go to state 40
    MIN          shift, and go to state 41
    NOT          shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    BOOLLITERAL  shift, and go to state 44
    INTLITERAL   shift, and go to state 45

    expr            go to state 46
    expressionlist  go to state 47
    unaryexpr       go to state 48
    unary_op        go to state 49
    operand         go to state 50
    literal         go to state 51
    basiclit        go to state 52
    operandname     go to state 53
    primaryexpr     go to state 54


State 29

   14 varspec: identifierlist type • ASSIGN expressionlist
   15        | identifierlist type •

    ASSIGN  shift, and go to state 55

    $default  reduce using rule 15 (varspec)


State 30

   22 type: typename •

    $default  reduce using rule 22 (type)


State 31

   52 identifierlist: identifier COMMA • identifierlist

    IDENTIFIER  shift, and go to state 16

    identifierlist  go to state 56
    identifier      go to state 19


State 32

   30 parameters: LPAREN • RPAREN
   31           | LPAREN • parameterlist COMMA RPAREN
   32           | LPAREN • parameterlist RPAREN

    INTEGER     shift, and go to state 25
    BOOLEAN     shift, and go to state 26
    LPAREN      shift, and go to state 27
    RPAREN      shift, and go to state 57
    IDENTIFIER  shift, and go to state 16

    type            go to state 58
    typename        go to state 30
    parameterlist   go to state 59
    parameterdecl   go to state 60
    identifierlist  go to state 61
    identifier      go to state 19


State 33

   17 functiondeclaration: FUNC functionname signature • functionbody

    LBRACE  shift, and go to state 62

    functionbody  go to state 63
    block         go to state 64


State 34

   20 signature: parameters • result
   21          | parameters •

    INTEGER  shift, and go to state 25
    BOOLEAN  shift, and go to state 26
    LPAREN   shift, and go to state 65

    $default  reduce using rule 21 (signature)

    type        go to state 66
    typelist    go to state 67
    typename    go to state 30
    result      go to state 68
    parameters  go to state 69


State 35

    3 topleveldeclarations: topleveldecl SEMICOLON topleveldeclarations •

    $default  reduce using rule 3 (topleveldeclarations)


State 36

   10 vardecl: VAR LPAREN varspeclist RPAREN •

    $default  reduce using rule 10 (vardecl)


State 37

   13 varspeclist: varspec SEMICOLON • varspeclist

    IDENTIFIER  shift, and go to state 16

    varspeclist     go to state 70
    varspec         go to state 24
    identifierlist  go to state 18
    identifier      go to state 19


State 38

   23 type: LPAREN type • RPAREN

    RPAREN  shift, and go to state 71


State 39

   62 operand: LPAREN • expr RPAREN

    LPAREN       shift, and go to state 39
    PLUS         shift, and go to state 40
    MIN          shift, and go to state 41
    NOT          shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    BOOLLITERAL  shift, and go to state 44
    INTLITERAL   shift, and go to state 45

    expr         go to state 72
    unaryexpr    go to state 48
    unary_op     go to state 49
    operand      go to state 50
    literal      go to state 51
    basiclit     go to state 52
    operandname  go to state 53
    primaryexpr  go to state 54


State 40

   57 unary_op: PLUS •

    $default  reduce using rule 57 (unary_op)


State 41

   58 unary_op: MIN •

    $default  reduce using rule 58 (unary_op)


State 42

   59 unary_op: NOT •

    $default  reduce using rule 59 (unary_op)


State 43

   66 operandname: IDENTIFIER •

    $default  reduce using rule 66 (operandname)


State 44

   65 basiclit: BOOLLITERAL •

    $default  reduce using rule 65 (basiclit)


State 45

   64 basiclit: INTLITERAL •

    $default  reduce using rule 64 (basiclit)


State 46

   38 expr: expr • EQ expr
   39     | expr • NE expr
   40     | expr • LT expr
   41     | expr • LE expr
   42     | expr • GT expr
   43     | expr • GE expr
   44     | expr • MUL expr
   45     | expr • DIV expr
   46     | expr • PLUS expr
   47     | expr • MIN expr
   48     | expr • OR expr
   49     | expr • AND expr
   51 expressionlist: expr •

    PLUS  shift, and go to state 73
    MIN   shift, and go to state 74
    MUL   shift, and go to state 75
    DIV   shift, and go to state 76
    AND   shift, and go to state 77
    OR    shift, and go to state 78
    GT    shift, and go to state 79
    GE    shift, and go to state 80
    LT    shift, and go to state 81
    LE    shift, and go to state 82
    EQ    shift, and go to state 83
    NE    shift, and go to state 84

    $default  reduce using rule 51 (expressionlist)


State 47

   16 varspec: identifierlist ASSIGN expressionlist •
   50 expressionlist: expressionlist • COMMA expr

    COMMA  shift, and go to state 85

    $default  reduce using rule 16 (varspec)


State 48

   37 expr: unaryexpr •

    $default  reduce using rule 37 (expr)


State 49

   56 unaryexpr: unary_op • unaryexpr

    LPAREN       shift, and go to state 39
    PLUS         shift, and go to state 40
    MIN          shift, and go to state 41
    NOT          shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    BOOLLITERAL  shift, and go to state 44
    INTLITERAL   shift, and go to state 45

    unaryexpr    go to state 86
    unary_op     go to state 49
    operand      go to state 50
    literal      go to state 51
    basiclit     go to state 52
    operandname  go to state 53
    primaryexpr  go to state 54


State 50

   67 primaryexpr: operand •

    $default  reduce using rule 67 (primaryexpr)


State 51

   60 operand: literal •

    $default  reduce using rule 60 (operand)


State 52

   63 literal: basiclit •

    $default  reduce using rule 63 (literal)


State 53

   61 operand: operandname •

    $default  reduce using rule 61 (operand)


State 54

   55 unaryexpr: primaryexpr •
   68 primaryexpr: primaryexpr • arguments

    LPAREN  shift, and go to state 87

    $default  reduce using rule 55 (unaryexpr)

    arguments  go to state 88


State 55

   14 varspec: identifierlist type ASSIGN • expressionlist

    LPAREN       shift, and go to state 39
    PLUS         shift, and go to state 40
    MIN          shift, and go to state 41
    NOT          shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    BOOLLITERAL  shift, and go to state 44
    INTLITERAL   shift, and go to state 45

    expr            go to state 46
    expressionlist  go to state 89
    unaryexpr       go to state 48
    unary_op        go to state 49
    operand         go to state 50
    literal         go to state 51
    basiclit        go to state 52
    operandname     go to state 53
    primaryexpr     go to state 54


State 56

   52 identifierlist: identifier COMMA identifierlist •

    $default  reduce using rule 52 (identifierlist)


State 57

   30 parameters: LPAREN RPAREN •

    $default  reduce using rule 30 (parameters)


State 58

   36 parameterdecl: type •

    $default  reduce using rule 36 (parameterdecl)


State 59

   31 parameters: LPAREN parameterlist • COMMA RPAREN
   32           | LPAREN parameterlist • RPAREN
   33 parameterlist: parameterlist • COMMA parameterdecl

    RPAREN  shift, and go to state 90
    COMMA   shift, and go to state 91


State 60

   34 parameterlist: parameterdecl •

    $default  reduce using rule 34 (parameterlist)


State 61

   35 parameterdecl: identifierlist • type

    INTEGER  shift, and go to state 25
    BOOLEAN  shift, and go to state 26
    LPAREN   shift, and go to state 27

    type      go to state 92
    typename  go to state 30


State 62

   72 block: LBRACE • statementlist RBRACE

    RETURN       shift, and go to state 93
    VAR          shift, and go to state 8
    IF           shift, and go to state 94
    FOR          shift, and go to state 95
    LPAREN       shift, and go to state 39
    LBRACE       shift, and go to state 62
    PLUS         shift, and go to state 40
    MIN          shift, and go to state 41
    NOT          shift, and go to state 42
    PRINT        shift, and go to state 96
    IDENTIFIER   shift, and go to state 43
    BOOLLITERAL  shift, and go to state 44
    INTLITERAL   shift, and go to state 45

    $default  reduce using rule 86 (emptystatement)

    declaration          go to state 97
    vardecl              go to state 13
    expr                 go to state 98
    expressionlist       go to state 99
    unaryexpr            go to state 48
    unary_op             go to state 49
    operand              go to state 50
    literal              go to state 51
    basiclit             go to state 52
    operandname          go to state 53
    primaryexpr          go to state 54
    block                go to state 100
    statementlist        go to state 101
    statement            go to state 102
    simplestatement      go to state 103
    emptystatement       go to state 104
    expressionstatement  go to state 105
    assignment           go to state 106
    incdecstatement      go to state 107
    ifstatement          go to state 108
    forstatement         go to state 109
    printstatement       go to state 110
    returnstatement      go to state 111


State 63

   17 functiondeclaration: FUNC functionname signature functionbody •

    $default  reduce using rule 17 (functiondeclaration)


State 64

   19 functionbody: block •

    $default  reduce using rule 19 (functionbody)


State 65

   23 type: LPAREN • type RPAREN
   25 typelist: LPAREN • typename COMMA typelist RPAREN
   30 parameters: LPAREN • RPAREN
   31           | LPAREN • parameterlist COMMA RPAREN
   32           | LPAREN • parameterlist RPAREN

    INTEGER     shift, and go to state 25
    BOOLEAN     shift, and go to state 26
    LPAREN      shift, and go to state 27
    RPAREN      shift, and go to state 57
    IDENTIFIER  shift, and go to state 16

    type            go to state 112
    typename        go to state 113
    parameterlist   go to state 59
    parameterdecl   go to state 60
    identifierlist  go to state 61
    identifier      go to state 19


State 66

   24 typelist: type •

    $default  reduce using rule 24 (typelist)


State 67

   29 result: typelist •

    $default  reduce using rule 29 (result)


State 68

   20 signature: parameters result •

    $default  reduce using rule 20 (signature)


State 69

   28 result: parameters •

    $default  reduce using rule 28 (result)


State 70

   13 varspeclist: varspec SEMICOLON varspeclist •

    $default  reduce using rule 13 (varspeclist)


State 71

   23 type: LPAREN type RPAREN •

    $default  reduce using rule 23 (type)


State 72

   38 expr: expr • EQ expr
   39     | expr • NE expr
   40     | expr • LT expr
   41     | expr • LE expr
   42     | expr • GT expr
   43     | expr • GE expr
   44     | expr • MUL expr
   45     | expr • DIV expr
   46     | expr • PLUS expr
   47     | expr • MIN expr
   48     | expr • OR expr
   49     | expr • AND expr
   62 operand: LPAREN expr • RPAREN

    RPAREN  shift, and go to state 114
    PLUS    shift, and go to state 73
    MIN     shift, and go to state 74
    MUL     shift, and go to state 75
    DIV     shift, and go to state 76
    AND     shift, and go to state 77
    OR      shift, and go to state 78
    GT      shift, and go to state 79
    GE      shift, and go to state 80
    LT      shift, and go to state 81
    LE      shift, and go to state 82
    EQ      shift, and go to state 83
    NE      shift, and go to state 84


State 73

   46 expr: expr PLUS • expr

    LPAREN       shift, and go to state 39
    PLUS         shift, and go to state 40
    MIN          shift, and go to state 41
    NOT          shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    BOOLLITERAL  shift, and go to state 44
    INTLITERAL   shift, and go to state 45

    expr         go to state 115
    unaryexpr    go to state 48
    unary_op     go to state 49
    operand      go to state 50
    literal      go to state 51
    basiclit     go to state 52
    operandname  go to state 53
    primaryexpr  go to state 54


State 74

   47 expr: expr MIN • expr

    LPAREN       shift, and go to state 39
    PLUS         shift, and go to state 40
    MIN          shift, and go to state 41
    NOT          shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    BOOLLITERAL  shift, and go to state 44
    INTLITERAL   shift, and go to state 45

    expr         go to state 116
    unaryexpr    go to state 48
    unary_op     go to state 49
    operand      go to state 50
    literal      go to state 51
    basiclit     go to state 52
    operandname  go to state 53
    primaryexpr  go to state 54


State 75

   44 expr: expr MUL • expr

    LPAREN       shift, and go to state 39
    PLUS         shift, and go to state 40
    MIN          shift, and go to state 41
    NOT          shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    BOOLLITERAL  shift, and go to state 44
    INTLITERAL   shift, and go to state 45

    expr         go to state 117
    unaryexpr    go to state 48
    unary_op     go to state 49
    operand      go to state 50
    literal      go to state 51
    basiclit     go to state 52
    operandname  go to state 53
    primaryexpr  go to state 54


State 76

   45 expr: expr DIV • expr

    LPAREN       shift, and go to state 39
    PLUS         shift, and go to state 40
    MIN          shift, and go to state 41
    NOT          shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    BOOLLITERAL  shift, and go to state 44
    INTLITERAL   shift, and go to state 45

    expr         go to state 118
    unaryexpr    go to state 48
    unary_op     go to state 49
    operand      go to state 50
    literal      go to state 51
    basiclit     go to state 52
    operandname  go to state 53
    primaryexpr  go to state 54


State 77

   49 expr: expr AND • expr

    LPAREN       shift, and go to state 39
    PLUS         shift, and go to state 40
    MIN          shift, and go to state 41
    NOT          shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    BOOLLITERAL  shift, and go to state 44
    INTLITERAL   shift, and go to state 45

    expr         go to state 119
    unaryexpr    go to state 48
    unary_op     go to state 49
    operand      go to state 50
    literal      go to state 51
    basiclit     go to state 52
    operandname  go to state 53
    primaryexpr  go to state 54


State 78

   48 expr: expr OR • expr

    LPAREN       shift, and go to state 39
    PLUS         shift, and go to state 40
    MIN          shift, and go to state 41
    NOT          shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    BOOLLITERAL  shift, and go to state 44
    INTLITERAL   shift, and go to state 45

    expr         go to state 120
    unaryexpr    go to state 48
    unary_op     go to state 49
    operand      go to state 50
    literal      go to state 51
    basiclit     go to state 52
    operandname  go to state 53
    primaryexpr  go to state 54


State 79

   42 expr: expr GT • expr

    LPAREN       shift, and go to state 39
    PLUS         shift, and go to state 40
    MIN          shift, and go to state 41
    NOT          shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    BOOLLITERAL  shift, and go to state 44
    INTLITERAL   shift, and go to state 45

    expr         go to state 121
    unaryexpr    go to state 48
    unary_op     go to state 49
    operand      go to state 50
    literal      go to state 51
    basiclit     go to state 52
    operandname  go to state 53
    primaryexpr  go to state 54


State 80

   43 expr: expr GE • expr

    LPAREN       shift, and go to state 39
    PLUS         shift, and go to state 40
    MIN          shift, and go to state 41
    NOT          shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    BOOLLITERAL  shift, and go to state 44
    INTLITERAL   shift, and go to state 45

    expr         go to state 122
    unaryexpr    go to state 48
    unary_op     go to state 49
    operand      go to state 50
    literal      go to state 51
    basiclit     go to state 52
    operandname  go to state 53
    primaryexpr  go to state 54


State 81

   40 expr: expr LT • expr

    LPAREN       shift, and go to state 39
    PLUS         shift, and go to state 40
    MIN          shift, and go to state 41
    NOT          shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    BOOLLITERAL  shift, and go to state 44
    INTLITERAL   shift, and go to state 45

    expr         go to state 123
    unaryexpr    go to state 48
    unary_op     go to state 49
    operand      go to state 50
    literal      go to state 51
    basiclit     go to state 52
    operandname  go to state 53
    primaryexpr  go to state 54


State 82

   41 expr: expr LE • expr

    LPAREN       shift, and go to state 39
    PLUS         shift, and go to state 40
    MIN          shift, and go to state 41
    NOT          shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    BOOLLITERAL  shift, and go to state 44
    INTLITERAL   shift, and go to state 45

    expr         go to state 124
    unaryexpr    go to state 48
    unary_op     go to state 49
    operand      go to state 50
    literal      go to state 51
    basiclit     go to state 52
    operandname  go to state 53
    primaryexpr  go to state 54


State 83

   38 expr: expr EQ • expr

    LPAREN       shift, and go to state 39
    PLUS         shift, and go to state 40
    MIN          shift, and go to state 41
    NOT          shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    BOOLLITERAL  shift, and go to state 44
    INTLITERAL   shift, and go to state 45

    expr         go to state 125
    unaryexpr    go to state 48
    unary_op     go to state 49
    operand      go to state 50
    literal      go to state 51
    basiclit     go to state 52
    operandname  go to state 53
    primaryexpr  go to state 54


State 84

   39 expr: expr NE • expr

    LPAREN       shift, and go to state 39
    PLUS         shift, and go to state 40
    MIN          shift, and go to state 41
    NOT          shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    BOOLLITERAL  shift, and go to state 44
    INTLITERAL   shift, and go to state 45

    expr         go to state 126
    unaryexpr    go to state 48
    unary_op     go to state 49
    operand      go to state 50
    literal      go to state 51
    basiclit     go to state 52
    operandname  go to state 53
    primaryexpr  go to state 54


State 85

   50 expressionlist: expressionlist COMMA • expr

    LPAREN       shift, and go to state 39
    PLUS         shift, and go to state 40
    MIN          shift, and go to state 41
    NOT          shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    BOOLLITERAL  shift, and go to state 44
    INTLITERAL   shift, and go to state 45

    expr         go to state 127
    unaryexpr    go to state 48
    unary_op     go to state 49
    operand      go to state 50
    literal      go to state 51
    basiclit     go to state 52
    operandname  go to state 53
    primaryexpr  go to state 54


State 86

   56 unaryexpr: unary_op unaryexpr •

    $default  reduce using rule 56 (unaryexpr)


State 87

   69 arguments: LPAREN • RPAREN
   70          | LPAREN • expressionlist RPAREN
   71          | LPAREN • expressionlist RCOMMA RPAREN

    LPAREN       shift, and go to state 39
    RPAREN       shift, and go to state 128
    PLUS         shift, and go to state 40
    MIN          shift, and go to state 41
    NOT          shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    BOOLLITERAL  shift, and go to state 44
    INTLITERAL   shift, and go to state 45

    expr            go to state 46
    expressionlist  go to state 129
    unaryexpr       go to state 48
    unary_op        go to state 49
    operand         go to state 50
    literal         go to state 51
    basiclit        go to state 52
    operandname     go to state 53
    primaryexpr     go to state 54


State 88

   68 primaryexpr: primaryexpr arguments •

    $default  reduce using rule 68 (primaryexpr)


State 89

   14 varspec: identifierlist type ASSIGN expressionlist •
   50 expressionlist: expressionlist • COMMA expr

    COMMA  shift, and go to state 85

    $default  reduce using rule 14 (varspec)


State 90

   32 parameters: LPAREN parameterlist RPAREN •

    $default  reduce using rule 32 (parameters)


State 91

   31 parameters: LPAREN parameterlist COMMA • RPAREN
   33 parameterlist: parameterlist COMMA • parameterdecl

    INTEGER     shift, and go to state 25
    BOOLEAN     shift, and go to state 26
    LPAREN      shift, and go to state 27
    RPAREN      shift, and go to state 130
    IDENTIFIER  shift, and go to state 16

    type            go to state 58
    typename        go to state 30
    parameterdecl   go to state 131
    identifierlist  go to state 61
    identifier      go to state 19


State 92

   35 parameterdecl: identifierlist type •

    $default  reduce using rule 35 (parameterdecl)


State 93

  111 returnstatement: RETURN • expressionlist
  112                | RETURN •

    LPAREN       shift, and go to state 39
    PLUS         shift, and go to state 40
    MIN          shift, and go to state 41
    NOT          shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    BOOLLITERAL  shift, and go to state 44
    INTLITERAL   shift, and go to state 45

    $default  reduce using rule 112 (returnstatement)

    expr            go to state 46
    expressionlist  go to state 132
    unaryexpr       go to state 48
    unary_op        go to state 49
    operand         go to state 50
    literal         go to state 51
    basiclit        go to state 52
    operandname     go to state 53
    primaryexpr     go to state 54


State 94

   96 ifstatement: IF • simplestatement SEMICOLON expr block ELSE ifstatement
   97            | IF • simplestatement SEMICOLON expr block ELSE block
   98            | IF • expr block ELSE ifstatement
   99            | IF • expr block ELSE block
  100            | IF • expr block

    LPAREN       shift, and go to state 39
    PLUS         shift, and go to state 40
    MIN          shift, and go to state 41
    NOT          shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    BOOLLITERAL  shift, and go to state 44
    INTLITERAL   shift, and go to state 45

    $default  reduce using rule 86 (emptystatement)

    expr                 go to state 133
    expressionlist       go to state 99
    unaryexpr            go to state 48
    unary_op             go to state 49
    operand              go to state 50
    literal              go to state 51
    basiclit             go to state 52
    operandname          go to state 53
    primaryexpr          go to state 54
    simplestatement      go to state 134
    emptystatement       go to state 104
    expressionstatement  go to state 105
    assignment           go to state 106
    incdecstatement      go to state 107


State 95

  101 forstatement: FOR • condition block
  102             | FOR • forclause block
  103             | FOR • block

    LPAREN       shift, and go to state 39
    LBRACE       shift, and go to state 62
    PLUS         shift, and go to state 40
    MIN          shift, and go to state 41
    NOT          shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    BOOLLITERAL  shift, and go to state 44
    INTLITERAL   shift, and go to state 45
    RSEMICOL     shift, and go to state 135

    $default  reduce using rule 86 (emptystatement)

    expr                 go to state 136
    expressionlist       go to state 99
    unaryexpr            go to state 48
    unary_op             go to state 49
    operand              go to state 50
    literal              go to state 51
    basiclit             go to state 52
    operandname          go to state 53
    primaryexpr          go to state 54
    block                go to state 137
    simplestatement      go to state 138
    emptystatement       go to state 104
    expressionstatement  go to state 105
    assignment           go to state 106
    incdecstatement      go to state 107
    condition            go to state 139
    forclause            go to state 140
    initstatement        go to state 141


State 96

  110 printstatement: PRINT • LPAREN expressionlist RPAREN

    LPAREN  shift, and go to state 142


State 97

   75 statement: declaration •

    $default  reduce using rule 75 (statement)


State 98

   38 expr: expr • EQ expr
   39     | expr • NE expr
   40     | expr • LT expr
   41     | expr • LE expr
   42     | expr • GT expr
   43     | expr • GE expr
   44     | expr • MUL expr
   45     | expr • DIV expr
   46     | expr • PLUS expr
   47     | expr • MIN expr
   48     | expr • OR expr
   49     | expr • AND expr
   51 expressionlist: expr •
   87 expressionstatement: expr •
   94 incdecstatement: expr • INC
   95                | expr • DEC

    PLUS  shift, and go to state 73
    MIN   shift, and go to state 74
    MUL   shift, and go to state 75
    DIV   shift, and go to state 76
    AND   shift, and go to state 77
    OR    shift, and go to state 78
    INC   shift, and go to state 143
    DEC   shift, and go to state 144
    GT    shift, and go to state 79
    GE    shift, and go to state 80
    LT    shift, and go to state 81
    LE    shift, and go to state 82
    EQ    shift, and go to state 83
    NE    shift, and go to state 84

    SEMICOLON  reduce using rule 87 (expressionstatement)
    LBRACE     reduce using rule 87 (expressionstatement)
    $default   reduce using rule 51 (expressionlist)


State 99

   50 expressionlist: expressionlist • COMMA expr
   88 assignment: expressionlist • assign_op expressionlist

    PLUSASSIGN  shift, and go to state 145
    MINASSIGN   shift, and go to state 146
    MULASSIGN   shift, and go to state 147
    DIVASSIGN   shift, and go to state 148
    ASSIGN      shift, and go to state 149
    COMMA       shift, and go to state 85

    assign_op  go to state 150


State 100

   76 statement: block •

    $default  reduce using rule 76 (statement)


State 101

   72 block: LBRACE statementlist • RBRACE

    RBRACE  shift, and go to state 151


State 102

   73 statementlist: statement • SEMICOLON
   74              | statement • SEMICOLON statementlist

    SEMICOLON  shift, and go to state 152


State 103

   80 statement: simplestatement •

    $default  reduce using rule 80 (statement)


State 104

   85 simplestatement: emptystatement •

    $default  reduce using rule 85 (simplestatement)


State 105

   82 simplestatement: expressionstatement •

    $default  reduce using rule 82 (simplestatement)


State 106

   83 simplestatement: assignment •

    $default  reduce using rule 83 (simplestatement)


State 107

   84 simplestatement: incdecstatement •

    $default  reduce using rule 84 (simplestatement)


State 108

   77 statement: ifstatement •

    $default  reduce using rule 77 (statement)


State 109

   78 statement: forstatement •

    $default  reduce using rule 78 (statement)


State 110

   81 statement: printstatement •

    $default  reduce using rule 81 (statement)


State 111

   79 statement: returnstatement •

    $default  reduce using rule 79 (statement)


State 112

   23 type: LPAREN type • RPAREN
   36 parameterdecl: type •

    RPAREN  shift, and go to state 71

    RPAREN    [reduce using rule 36 (parameterdecl)]
    $default  reduce using rule 36 (parameterdecl)


State 113

   22 type: typename •
   25 typelist: LPAREN typename • COMMA typelist RPAREN

    COMMA  shift, and go to state 153

    COMMA     [reduce using rule 22 (type)]
    $default  reduce using rule 22 (type)


State 114

   62 operand: LPAREN expr RPAREN •

    $default  reduce using rule 62 (operand)


State 115

   38 expr: expr • EQ expr
   39     | expr • NE expr
   40     | expr • LT expr
   41     | expr • LE expr
   42     | expr • GT expr
   43     | expr • GE expr
   44     | expr • MUL expr
   45     | expr • DIV expr
   46     | expr • PLUS expr
   46     | expr PLUS expr •
   47     | expr • MIN expr
   48     | expr • OR expr
   49     | expr • AND expr

    MUL  shift, and go to state 75
    DIV  shift, and go to state 76

    $default  reduce using rule 46 (expr)


State 116

   38 expr: expr • EQ expr
   39     | expr • NE expr
   40     | expr • LT expr
   41     | expr • LE expr
   42     | expr • GT expr
   43     | expr • GE expr
   44     | expr • MUL expr
   45     | expr • DIV expr
   46     | expr • PLUS expr
   47     | expr • MIN expr
   47     | expr MIN expr •
   48     | expr • OR expr
   49     | expr • AND expr

    MUL  shift, and go to state 75
    DIV  shift, and go to state 76

    $default  reduce using rule 47 (expr)


State 117

   38 expr: expr • EQ expr
   39     | expr • NE expr
   40     | expr • LT expr
   41     | expr • LE expr
   42     | expr • GT expr
   43     | expr • GE expr
   44     | expr • MUL expr
   44     | expr MUL expr •
   45     | expr • DIV expr
   46     | expr • PLUS expr
   47     | expr • MIN expr
   48     | expr • OR expr
   49     | expr • AND expr

    $default  reduce using rule 44 (expr)


State 118

   38 expr: expr • EQ expr
   39     | expr • NE expr
   40     | expr • LT expr
   41     | expr • LE expr
   42     | expr • GT expr
   43     | expr • GE expr
   44     | expr • MUL expr
   45     | expr • DIV expr
   45     | expr DIV expr •
   46     | expr • PLUS expr
   47     | expr • MIN expr
   48     | expr • OR expr
   49     | expr • AND expr

    $default  reduce using rule 45 (expr)


State 119

   38 expr: expr • EQ expr
   39     | expr • NE expr
   40     | expr • LT expr
   41     | expr • LE expr
   42     | expr • GT expr
   43     | expr • GE expr
   44     | expr • MUL expr
   45     | expr • DIV expr
   46     | expr • PLUS expr
   47     | expr • MIN expr
   48     | expr • OR expr
   49     | expr • AND expr
   49     | expr AND expr •

    PLUS  shift, and go to state 73
    MIN   shift, and go to state 74
    MUL   shift, and go to state 75
    DIV   shift, and go to state 76
    GT    shift, and go to state 79
    GE    shift, and go to state 80
    LT    shift, and go to state 81
    LE    shift, and go to state 82
    EQ    shift, and go to state 83
    NE    shift, and go to state 84

    $default  reduce using rule 49 (expr)


State 120

   38 expr: expr • EQ expr
   39     | expr • NE expr
   40     | expr • LT expr
   41     | expr • LE expr
   42     | expr • GT expr
   43     | expr • GE expr
   44     | expr • MUL expr
   45     | expr • DIV expr
   46     | expr • PLUS expr
   47     | expr • MIN expr
   48     | expr • OR expr
   48     | expr OR expr •
   49     | expr • AND expr

    PLUS  shift, and go to state 73
    MIN   shift, and go to state 74
    MUL   shift, and go to state 75
    DIV   shift, and go to state 76
    AND   shift, and go to state 77
    GT    shift, and go to state 79
    GE    shift, and go to state 80
    LT    shift, and go to state 81
    LE    shift, and go to state 82
    EQ    shift, and go to state 83
    NE    shift, and go to state 84

    $default  reduce using rule 48 (expr)


State 121

   38 expr: expr • EQ expr
   39     | expr • NE expr
   40     | expr • LT expr
   41     | expr • LE expr
   42     | expr • GT expr
   42     | expr GT expr •
   43     | expr • GE expr
   44     | expr • MUL expr
   45     | expr • DIV expr
   46     | expr • PLUS expr
   47     | expr • MIN expr
   48     | expr • OR expr
   49     | expr • AND expr

    PLUS  shift, and go to state 73
    MIN   shift, and go to state 74
    MUL   shift, and go to state 75
    DIV   shift, and go to state 76

    $default  reduce using rule 42 (expr)


State 122

   38 expr: expr • EQ expr
   39     | expr • NE expr
   40     | expr • LT expr
   41     | expr • LE expr
   42     | expr • GT expr
   43     | expr • GE expr
   43     | expr GE expr •
   44     | expr • MUL expr
   45     | expr • DIV expr
   46     | expr • PLUS expr
   47     | expr • MIN expr
   48     | expr • OR expr
   49     | expr • AND expr

    PLUS  shift, and go to state 73
    MIN   shift, and go to state 74
    MUL   shift, and go to state 75
    DIV   shift, and go to state 76

    $default  reduce using rule 43 (expr)


State 123

   38 expr: expr • EQ expr
   39     | expr • NE expr
   40     | expr • LT expr
   40     | expr LT expr •
   41     | expr • LE expr
   42     | expr • GT expr
   43     | expr • GE expr
   44     | expr • MUL expr
   45     | expr • DIV expr
   46     | expr • PLUS expr
   47     | expr • MIN expr
   48     | expr • OR expr
   49     | expr • AND expr

    PLUS  shift, and go to state 73
    MIN   shift, and go to state 74
    MUL   shift, and go to state 75
    DIV   shift, and go to state 76

    $default  reduce using rule 40 (expr)


State 124

   38 expr: expr • EQ expr
   39     | expr • NE expr
   40     | expr • LT expr
   41     | expr • LE expr
   41     | expr LE expr •
   42     | expr • GT expr
   43     | expr • GE expr
   44     | expr • MUL expr
   45     | expr • DIV expr
   46     | expr • PLUS expr
   47     | expr • MIN expr
   48     | expr • OR expr
   49     | expr • AND expr

    PLUS  shift, and go to state 73
    MIN   shift, and go to state 74
    MUL   shift, and go to state 75
    DIV   shift, and go to state 76

    $default  reduce using rule 41 (expr)


State 125

   38 expr: expr • EQ expr
   38     | expr EQ expr •
   39     | expr • NE expr
   40     | expr • LT expr
   41     | expr • LE expr
   42     | expr • GT expr
   43     | expr • GE expr
   44     | expr • MUL expr
   45     | expr • DIV expr
   46     | expr • PLUS expr
   47     | expr • MIN expr
   48     | expr • OR expr
   49     | expr • AND expr

    PLUS  shift, and go to state 73
    MIN   shift, and go to state 74
    MUL   shift, and go to state 75
    DIV   shift, and go to state 76

    $default  reduce using rule 38 (expr)


State 126

   38 expr: expr • EQ expr
   39     | expr • NE expr
   39     | expr NE expr •
   40     | expr • LT expr
   41     | expr • LE expr
   42     | expr • GT expr
   43     | expr • GE expr
   44     | expr • MUL expr
   45     | expr • DIV expr
   46     | expr • PLUS expr
   47     | expr • MIN expr
   48     | expr • OR expr
   49     | expr • AND expr

    PLUS  shift, and go to state 73
    MIN   shift, and go to state 74
    MUL   shift, and go to state 75
    DIV   shift, and go to state 76

    $default  reduce using rule 39 (expr)


State 127

   38 expr: expr • EQ expr
   39     | expr • NE expr
   40     | expr • LT expr
   41     | expr • LE expr
   42     | expr • GT expr
   43     | expr • GE expr
   44     | expr • MUL expr
   45     | expr • DIV expr
   46     | expr • PLUS expr
   47     | expr • MIN expr
   48     | expr • OR expr
   49     | expr • AND expr
   50 expressionlist: expressionlist COMMA expr •

    PLUS  shift, and go to state 73
    MIN   shift, and go to state 74
    MUL   shift, and go to state 75
    DIV   shift, and go to state 76
    AND   shift, and go to state 77
    OR    shift, and go to state 78
    GT    shift, and go to state 79
    GE    shift, and go to state 80
    LT    shift, and go to state 81
    LE    shift, and go to state 82
    EQ    shift, and go to state 83
    NE    shift, and go to state 84

    $default  reduce using rule 50 (expressionlist)


State 128

   69 arguments: LPAREN RPAREN •

    $default  reduce using rule 69 (arguments)


State 129

   50 expressionlist: expressionlist • COMMA expr
   70 arguments: LPAREN expressionlist • RPAREN
   71          | LPAREN expressionlist • RCOMMA RPAREN

    RPAREN  shift, and go to state 154
    COMMA   shift, and go to state 85
    RCOMMA  shift, and go to state 155


State 130

   31 parameters: LPAREN parameterlist COMMA RPAREN •

    $default  reduce using rule 31 (parameters)


State 131

   33 parameterlist: parameterlist COMMA parameterdecl •

    $default  reduce using rule 33 (parameterlist)


State 132

   50 expressionlist: expressionlist • COMMA expr
  111 returnstatement: RETURN expressionlist •

    COMMA  shift, and go to state 85

    $default  reduce using rule 111 (returnstatement)


State 133

   38 expr: expr • EQ expr
   39     | expr • NE expr
   40     | expr • LT expr
   41     | expr • LE expr
   42     | expr • GT expr
   43     | expr • GE expr
   44     | expr • MUL expr
   45     | expr • DIV expr
   46     | expr • PLUS expr
   47     | expr • MIN expr
   48     | expr • OR expr
   49     | expr • AND expr
   51 expressionlist: expr •
   87 expressionstatement: expr •
   94 incdecstatement: expr • INC
   95                | expr • DEC
   98 ifstatement: IF expr • block ELSE ifstatement
   99            | IF expr • block ELSE block
  100            | IF expr • block

    LBRACE  shift, and go to state 62
    PLUS    shift, and go to state 73
    MIN     shift, and go to state 74
    MUL     shift, and go to state 75
    DIV     shift, and go to state 76
    AND     shift, and go to state 77
    OR      shift, and go to state 78
    INC     shift, and go to state 143
    DEC     shift, and go to state 144
    GT      shift, and go to state 79
    GE      shift, and go to state 80
    LT      shift, and go to state 81
    LE      shift, and go to state 82
    EQ      shift, and go to state 83
    NE      shift, and go to state 84

    SEMICOLON  reduce using rule 87 (expressionstatement)
    $default   reduce using rule 51 (expressionlist)

    block  go to state 156


State 134

   96 ifstatement: IF simplestatement • SEMICOLON expr block ELSE ifstatement
   97            | IF simplestatement • SEMICOLON expr block ELSE block

    SEMICOLON  shift, and go to state 157


State 135

  107 forclause: RSEMICOL • condition RSEMICOL poststatement

    LPAREN       shift, and go to state 39
    PLUS         shift, and go to state 40
    MIN          shift, and go to state 41
    NOT          shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    BOOLLITERAL  shift, and go to state 44
    INTLITERAL   shift, and go to state 45

    expr         go to state 158
    unaryexpr    go to state 48
    unary_op     go to state 49
    operand      go to state 50
    literal      go to state 51
    basiclit     go to state 52
    operandname  go to state 53
    primaryexpr  go to state 54
    condition    go to state 159


State 136

   38 expr: expr • EQ expr
   39     | expr • NE expr
   40     | expr • LT expr
   41     | expr • LE expr
   42     | expr • GT expr
   43     | expr • GE expr
   44     | expr • MUL expr
   45     | expr • DIV expr
   46     | expr • PLUS expr
   47     | expr • MIN expr
   48     | expr • OR expr
   49     | expr • AND expr
   51 expressionlist: expr •
   87 expressionstatement: expr •
   94 incdecstatement: expr • INC
   95                | expr • DEC
  104 condition: expr •

    PLUS  shift, and go to state 73
    MIN   shift, and go to state 74
    MUL   shift, and go to state 75
    DIV   shift, and go to state 76
    AND   shift, and go to state 77
    OR    shift, and go to state 78
    INC   shift, and go to state 143
    DEC   shift, and go to state 144
    GT    shift, and go to state 79
    GE    shift, and go to state 80
    LT    shift, and go to state 81
    LE    shift, and go to state 82
    EQ    shift, and go to state 83
    NE    shift, and go to state 84

    SEMICOLON  reduce using rule 87 (expressionstatement)
    LBRACE     reduce using rule 104 (condition)
    $default   reduce using rule 51 (expressionlist)


State 137

  103 forstatement: FOR block •

    $default  reduce using rule 103 (forstatement)


State 138

  108 initstatement: simplestatement •

    $default  reduce using rule 108 (initstatement)


State 139

  101 forstatement: FOR condition • block

    LBRACE  shift, and go to state 62

    block  go to state 160


State 140

  102 forstatement: FOR forclause • block

    LBRACE  shift, and go to state 62

    block  go to state 161


State 141

  105 forclause: initstatement • SEMICOLON condition SEMICOLON poststatement
  106          | initstatement • SEMICOLON condition RSEMICOL

    SEMICOLON  shift, and go to state 162


State 142

  110 printstatement: PRINT LPAREN • expressionlist RPAREN

    LPAREN       shift, and go to state 39
    PLUS         shift, and go to state 40
    MIN          shift, and go to state 41
    NOT          shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    BOOLLITERAL  shift, and go to state 44
    INTLITERAL   shift, and go to state 45

    expr            go to state 46
    expressionlist  go to state 163
    unaryexpr       go to state 48
    unary_op        go to state 49
    operand         go to state 50
    literal         go to state 51
    basiclit        go to state 52
    operandname     go to state 53
    primaryexpr     go to state 54


State 143

   94 incdecstatement: expr INC •

    $default  reduce using rule 94 (incdecstatement)


State 144

   95 incdecstatement: expr DEC •

    $default  reduce using rule 95 (incdecstatement)


State 145

   90 assign_op: PLUSASSIGN •

    $default  reduce using rule 90 (assign_op)


State 146

   91 assign_op: MINASSIGN •

    $default  reduce using rule 91 (assign_op)


State 147

   92 assign_op: MULASSIGN •

    $default  reduce using rule 92 (assign_op)


State 148

   93 assign_op: DIVASSIGN •

    $default  reduce using rule 93 (assign_op)


State 149

   89 assign_op: ASSIGN •

    $default  reduce using rule 89 (assign_op)


State 150

   88 assignment: expressionlist assign_op • expressionlist

    LPAREN       shift, and go to state 39
    PLUS         shift, and go to state 40
    MIN          shift, and go to state 41
    NOT          shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    BOOLLITERAL  shift, and go to state 44
    INTLITERAL   shift, and go to state 45

    expr            go to state 46
    expressionlist  go to state 164
    unaryexpr       go to state 48
    unary_op        go to state 49
    operand         go to state 50
    literal         go to state 51
    basiclit        go to state 52
    operandname     go to state 53
    primaryexpr     go to state 54


State 151

   72 block: LBRACE statementlist RBRACE •

    $default  reduce using rule 72 (block)


State 152

   73 statementlist: statement SEMICOLON •
   74              | statement SEMICOLON • statementlist

    RETURN       shift, and go to state 93
    VAR          shift, and go to state 8
    IF           shift, and go to state 94
    FOR          shift, and go to state 95
    LPAREN       shift, and go to state 39
    LBRACE       shift, and go to state 62
    PLUS         shift, and go to state 40
    MIN          shift, and go to state 41
    NOT          shift, and go to state 42
    PRINT        shift, and go to state 96
    IDENTIFIER   shift, and go to state 43
    BOOLLITERAL  shift, and go to state 44
    INTLITERAL   shift, and go to state 45

    SEMICOLON  reduce using rule 86 (emptystatement)
    $default   reduce using rule 73 (statementlist)

    declaration          go to state 97
    vardecl              go to state 13
    expr                 go to state 98
    expressionlist       go to state 99
    unaryexpr            go to state 48
    unary_op             go to state 49
    operand              go to state 50
    literal              go to state 51
    basiclit             go to state 52
    operandname          go to state 53
    primaryexpr          go to state 54
    block                go to state 100
    statementlist        go to state 165
    statement            go to state 102
    simplestatement      go to state 103
    emptystatement       go to state 104
    expressionstatement  go to state 105
    assignment           go to state 106
    incdecstatement      go to state 107
    ifstatement          go to state 108
    forstatement         go to state 109
    printstatement       go to state 110
    returnstatement      go to state 111


State 153

   25 typelist: LPAREN typename COMMA • typelist RPAREN

    INTEGER  shift, and go to state 25
    BOOLEAN  shift, and go to state 26
    LPAREN   shift, and go to state 166

    type      go to state 66
    typelist  go to state 167
    typename  go to state 30


State 154

   70 arguments: LPAREN expressionlist RPAREN •

    $default  reduce using rule 70 (arguments)


State 155

   71 arguments: LPAREN expressionlist RCOMMA • RPAREN

    RPAREN  shift, and go to state 168


State 156

   98 ifstatement: IF expr block • ELSE ifstatement
   99            | IF expr block • ELSE block
  100            | IF expr block •

    ELSE  shift, and go to state 169

    $default  reduce using rule 100 (ifstatement)


State 157

   96 ifstatement: IF simplestatement SEMICOLON • expr block ELSE ifstatement
   97            | IF simplestatement SEMICOLON • expr block ELSE block

    LPAREN       shift, and go to state 39
    PLUS         shift, and go to state 40
    MIN          shift, and go to state 41
    NOT          shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    BOOLLITERAL  shift, and go to state 44
    INTLITERAL   shift, and go to state 45

    expr         go to state 170
    unaryexpr    go to state 48
    unary_op     go to state 49
    operand      go to state 50
    literal      go to state 51
    basiclit     go to state 52
    operandname  go to state 53
    primaryexpr  go to state 54


State 158

   38 expr: expr • EQ expr
   39     | expr • NE expr
   40     | expr • LT expr
   41     | expr • LE expr
   42     | expr • GT expr
   43     | expr • GE expr
   44     | expr • MUL expr
   45     | expr • DIV expr
   46     | expr • PLUS expr
   47     | expr • MIN expr
   48     | expr • OR expr
   49     | expr • AND expr
  104 condition: expr •

    PLUS  shift, and go to state 73
    MIN   shift, and go to state 74
    MUL   shift, and go to state 75
    DIV   shift, and go to state 76
    AND   shift, and go to state 77
    OR    shift, and go to state 78
    GT    shift, and go to state 79
    GE    shift, and go to state 80
    LT    shift, and go to state 81
    LE    shift, and go to state 82
    EQ    shift, and go to state 83
    NE    shift, and go to state 84

    $default  reduce using rule 104 (condition)


State 159

  107 forclause: RSEMICOL condition • RSEMICOL poststatement

    RSEMICOL  shift, and go to state 171


State 160

  101 forstatement: FOR condition block •

    $default  reduce using rule 101 (forstatement)


State 161

  102 forstatement: FOR forclause block •

    $default  reduce using rule 102 (forstatement)


State 162

  105 forclause: initstatement SEMICOLON • condition SEMICOLON poststatement
  106          | initstatement SEMICOLON • condition RSEMICOL

    LPAREN       shift, and go to state 39
    PLUS         shift, and go to state 40
    MIN          shift, and go to state 41
    NOT          shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    BOOLLITERAL  shift, and go to state 44
    INTLITERAL   shift, and go to state 45

    expr         go to state 158
    unaryexpr    go to state 48
    unary_op     go to state 49
    operand      go to state 50
    literal      go to state 51
    basiclit     go to state 52
    operandname  go to state 53
    primaryexpr  go to state 54
    condition    go to state 172


State 163

   50 expressionlist: expressionlist • COMMA expr
  110 printstatement: PRINT LPAREN expressionlist • RPAREN

    RPAREN  shift, and go to state 173
    COMMA   shift, and go to state 85


State 164

   50 expressionlist: expressionlist • COMMA expr
   88 assignment: expressionlist assign_op expressionlist •

    COMMA  shift, and go to state 85

    $default  reduce using rule 88 (assignment)


State 165

   74 statementlist: statement SEMICOLON statementlist •

    $default  reduce using rule 74 (statementlist)


State 166

   23 type: LPAREN • type RPAREN
   25 typelist: LPAREN • typename COMMA typelist RPAREN

    INTEGER  shift, and go to state 25
    BOOLEAN  shift, and go to state 26
    LPAREN   shift, and go to state 27

    type      go to state 38
    typename  go to state 113


State 167

   25 typelist: LPAREN typename COMMA typelist • RPAREN

    RPAREN  shift, and go to state 174


State 168

   71 arguments: LPAREN expressionlist RCOMMA RPAREN •

    $default  reduce using rule 71 (arguments)


State 169

   98 ifstatement: IF expr block ELSE • ifstatement
   99            | IF expr block ELSE • block

    IF      shift, and go to state 94
    LBRACE  shift, and go to state 62

    block        go to state 175
    ifstatement  go to state 176


State 170

   38 expr: expr • EQ expr
   39     | expr • NE expr
   40     | expr • LT expr
   41     | expr • LE expr
   42     | expr • GT expr
   43     | expr • GE expr
   44     | expr • MUL expr
   45     | expr • DIV expr
   46     | expr • PLUS expr
   47     | expr • MIN expr
   48     | expr • OR expr
   49     | expr • AND expr
   96 ifstatement: IF simplestatement SEMICOLON expr • block ELSE ifstatement
   97            | IF simplestatement SEMICOLON expr • block ELSE block

    LBRACE  shift, and go to state 62
    PLUS    shift, and go to state 73
    MIN     shift, and go to state 74
    MUL     shift, and go to state 75
    DIV     shift, and go to state 76
    AND     shift, and go to state 77
    OR      shift, and go to state 78
    GT      shift, and go to state 79
    GE      shift, and go to state 80
    LT      shift, and go to state 81
    LE      shift, and go to state 82
    EQ      shift, and go to state 83
    NE      shift, and go to state 84

    block  go to state 177


State 171

  107 forclause: RSEMICOL condition RSEMICOL • poststatement

    LPAREN       shift, and go to state 39
    PLUS         shift, and go to state 40
    MIN          shift, and go to state 41
    NOT          shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    BOOLLITERAL  shift, and go to state 44
    INTLITERAL   shift, and go to state 45

    $default  reduce using rule 86 (emptystatement)

    expr                 go to state 98
    expressionlist       go to state 99
    unaryexpr            go to state 48
    unary_op             go to state 49
    operand              go to state 50
    literal              go to state 51
    basiclit             go to state 52
    operandname          go to state 53
    primaryexpr          go to state 54
    simplestatement      go to state 178
    emptystatement       go to state 104
    expressionstatement  go to state 105
    assignment           go to state 106
    incdecstatement      go to state 107
    poststatement        go to state 179


State 172

  105 forclause: initstatement SEMICOLON condition • SEMICOLON poststatement
  106          | initstatement SEMICOLON condition • RSEMICOL

    SEMICOLON  shift, and go to state 180
    RSEMICOL   shift, and go to state 181


State 173

  110 printstatement: PRINT LPAREN expressionlist RPAREN •

    $default  reduce using rule 110 (printstatement)


State 174

   25 typelist: LPAREN typename COMMA typelist RPAREN •

    $default  reduce using rule 25 (typelist)


State 175

   99 ifstatement: IF expr block ELSE block •

    $default  reduce using rule 99 (ifstatement)


State 176

   98 ifstatement: IF expr block ELSE ifstatement •

    $default  reduce using rule 98 (ifstatement)


State 177

   96 ifstatement: IF simplestatement SEMICOLON expr block • ELSE ifstatement
   97            | IF simplestatement SEMICOLON expr block • ELSE block

    ELSE  shift, and go to state 182


State 178

  109 poststatement: simplestatement •

    $default  reduce using rule 109 (poststatement)


State 179

  107 forclause: RSEMICOL condition RSEMICOL poststatement •

    $default  reduce using rule 107 (forclause)


State 180

  105 forclause: initstatement SEMICOLON condition SEMICOLON • poststatement

    LPAREN       shift, and go to state 39
    PLUS         shift, and go to state 40
    MIN          shift, and go to state 41
    NOT          shift, and go to state 42
    IDENTIFIER   shift, and go to state 43
    BOOLLITERAL  shift, and go to state 44
    INTLITERAL   shift, and go to state 45

    $default  reduce using rule 86 (emptystatement)

    expr                 go to state 98
    expressionlist       go to state 99
    unaryexpr            go to state 48
    unary_op             go to state 49
    operand              go to state 50
    literal              go to state 51
    basiclit             go to state 52
    operandname          go to state 53
    primaryexpr          go to state 54
    simplestatement      go to state 178
    emptystatement       go to state 104
    expressionstatement  go to state 105
    assignment           go to state 106
    incdecstatement      go to state 107
    poststatement        go to state 183


State 181

  106 forclause: initstatement SEMICOLON condition RSEMICOL •

    $default  reduce using rule 106 (forclause)


State 182

   96 ifstatement: IF simplestatement SEMICOLON expr block ELSE • ifstatement
   97            | IF simplestatement SEMICOLON expr block ELSE • block

    IF      shift, and go to state 94
    LBRACE  shift, and go to state 62

    block        go to state 184
    ifstatement  go to state 185


State 183

  105 forclause: initstatement SEMICOLON condition SEMICOLON poststatement •

    $default  reduce using rule 105 (forclause)


State 184

   97 ifstatement: IF simplestatement SEMICOLON expr block ELSE block •

    $default  reduce using rule 97 (ifstatement)


State 185

   96 ifstatement: IF simplestatement SEMICOLON expr block ELSE ifstatement •

    $default  reduce using rule 96 (ifstatement)
