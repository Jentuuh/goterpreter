Terminals unused in grammar

    NEWLINE
    IMPORT


State 114 conflicts: 1 shift/reduce


Grammar

    0 $accept: sourcefile $end

    1 sourcefile: packageclause SEMICOLON topleveldeclarations
    2           | packageclause SEMICOLON

    3 topleveldeclarations: topleveldecl SEMICOLON topleveldeclarations
    4                     | topleveldecl SEMICOLON

    5 packageclause: PACKAGE packagename

    6 packagename: IDENTIFIER

    7 topleveldecl: declaration
    8             | functiondeclaration

    9 declaration: vardecl

   10 vardecl: VAR varspec
   11        | VAR LPAREN varspec SEMICOLON RPAREN

   12 shortvardecl: identifierlist SHORTVARASSIGN expressionlist

   13 varspec: identifierlist type ASSIGN expressionlist
   14        | identifierlist type
   15        | identifierlist ASSIGN expressionlist

   16 functiondeclaration: FUNC functionname signature functionbody

   17 functionname: IDENTIFIER

   18 functionbody: block

   19 signature: parameters result
   20          | parameters

   21 type: typename
   22     | LPAREN type RPAREN

   23 typename: IDENTIFIER
   24         | INTEGER
   25         | BOOLEAN

   26 result: parameters
   27       | type

   28 parameters: LPAREN RPAREN
   29           | LPAREN parameterlist COMMA RPAREN
   30           | LPAREN parameterlist RPAREN

   31 parameterlist: parameterlist COMMA parameterdecl
   32              | parameterdecl

   33 parameterdecl: identifierlist type
   34              | type

   35 expr: unaryexpr
   36     | expr EQ expr
   37     | expr NE expr
   38     | expr LT expr
   39     | expr LE expr
   40     | expr GT expr
   41     | expr GE expr
   42     | expr MUL expr
   43     | expr DIV expr
   44     | expr PLUS expr
   45     | expr MIN expr
   46     | expr OR expr
   47     | expr AND expr

   48 expressionlist: expressionlist COMMA expr
   49               | expr

   50 identifierlist: identifier RCOMMA identifierlist
   51               | identifier

   52 identifier: IDENTIFIER

   53 unaryexpr: primaryexpr
   54          | unary_op unaryexpr

   55 unary_op: PLUS
   56         | UMINUS
   57         | NOT

   58 operand: literal
   59        | operandname
   60        | LPAREN expr RPAREN

   61 literal: basiclit

   62 basiclit: INTLITERAL
   63         | BOOLLITERAL

   64 operandname: IDENTIFIER

   65 primaryexpr: operand
   66            | primaryexpr arguments

   67 arguments: LPAREN RPAREN
   68          | LPAREN expressionlist RPAREN
   69          | LPAREN expressionlist RCOMMA RPAREN

   70 block: LBRACE statementlist RBRACE

   71 statementlist: statement SEMICOLON
   72              | statement SEMICOLON statementlist

   73 statement: declaration
   74          | block
   75          | ifstatement
   76          | forstatement
   77          | returnstatement
   78          | simplestatement
   79          | printstatement

   80 simplestatement: expressionstatement
   81                | assignment
   82                | incdecstatement
   83                | emptystatement
   84                | shortvardecl

   85 emptystatement: ε

   86 expressionstatement: expr

   87 assignment: expressionlist assign_op expressionlist

   88 assign_op: ASSIGN
   89          | PLUSASSIGN
   90          | MINASSIGN
   91          | MULASSIGN
   92          | DIVASSIGN

   93 incdecstatement: expr INC
   94                | expr DEC

   95 ifstatement: IF simplestatement SEMICOLON expr block ELSE ifstatement
   96            | IF simplestatement SEMICOLON expr block ELSE block
   97            | IF expr block ELSE ifstatement
   98            | IF expr block ELSE block
   99            | IF expr block

  100 forstatement: FOR condition block
  101             | FOR forclause block
  102             | FOR block

  103 condition: expr

  104 forclause: initstatement SEMICOLON condition SEMICOLON poststatement
  105          | initstatement SEMICOLON condition RSEMICOL
  106          | RSEMICOL condition RSEMICOL poststatement

  107 initstatement: simplestatement

  108 poststatement: simplestatement

  109 printstatement: PRINT LPAREN expressionlist RPAREN

  110 returnstatement: RETURN expressionlist
  111                | RETURN


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    SEMICOLON (258) 1 2 3 4 11 71 72 95 96 104 105
    INTEGER (259) 24
    BOOLEAN (260) 25
    PACKAGE (261) 5
    RETURN (262) 110 111
    VAR (263) 10 11
    IF (264) 95 96 97 98 99
    FOR (265) 100 101 102
    LPAREN (266) 11 22 28 29 30 60 67 68 69 109
    RPAREN (267) 11 22 28 29 30 60 67 68 69 109
    LBRACE (268) 70
    RBRACE (269) 70
    PLUS (270) 44 55
    MIN (271) 45
    MUL (272) 42
    DIV (273) 43
    PLUSASSIGN (274) 89
    MINASSIGN (275) 90
    MULASSIGN (276) 91
    DIVASSIGN (277) 92
    AND (278) 47
    OR (279) 46
    NOT (280) 57
    INC (281) 93
    DEC (282) 94
    GT (283) 40
    GE (284) 41
    LT (285) 38
    LE (286) 39
    EQ (287) 36
    NE (288) 37
    ASSIGN (289) 13 15 88
    FUNC (290) 16
    NEWLINE (291)
    IMPORT (292)
    COMMA (293) 29 31 48
    ELSE (294) 95 96 97 98
    SHORTVARASSIGN (295) 12
    PRINT (296) 109
    IDENTIFIER <id> (297) 6 17 23 52 64
    BOOLLITERAL <boollit> (298) 63
    INTLITERAL <intlit> (299) 62
    RSEMICOL (300) 105 106
    RCOMMA (301) 50 69
    UMINUS (302) 56


Nonterminals, with rules where they appear

    $accept (48)
        on left: 0
    sourcefile <srcfile> (49)
        on left: 1 2
        on right: 0
    topleveldeclarations <decllist> (50)
        on left: 3 4
        on right: 1 3
    packageclause <packageclause> (51)
        on left: 5
        on right: 1 2
    packagename <identifier> (52)
        on left: 6
        on right: 5
    topleveldecl <toplvldecl> (53)
        on left: 7 8
        on right: 3 4
    declaration <toplvldecl> (54)
        on left: 9
        on right: 7 73
    vardecl <toplvldecl> (55)
        on left: 10 11
        on right: 9
    shortvardecl (56)
        on left: 12
        on right: 84
    varspec <varspec> (57)
        on left: 13 14 15
        on right: 10 11
    functiondeclaration <toplvldecl> (58)
        on left: 16
        on right: 8
    functionname <identifier> (59)
        on left: 17
        on right: 16
    functionbody <block> (60)
        on left: 18
        on right: 16
    signature <signature> (61)
        on left: 19 20
        on right: 16
    type <type> (62)
        on left: 21 22
        on right: 13 14 22 27 33 34
    typename <type> (63)
        on left: 23 24 25
        on right: 21
    result <result> (64)
        on left: 26 27
        on right: 19
    parameters <paramlist> (65)
        on left: 28 29 30
        on right: 19 20 26
    parameterlist <paramlist> (66)
        on left: 31 32
        on right: 29 30 31
    parameterdecl <paramdecl> (67)
        on left: 33 34
        on right: 31 32
    expr <exp> (68)
        on left: 35 36 37 38 39 40 41 42 43 44 45 46 47
        on right: 36 37 38 39 40 41 42 43 44 45 46 47 48 49 60 86 93 94 95 96 97 98 99 103
    expressionlist <explist> (69)
        on left: 48 49
        on right: 12 13 15 48 68 69 87 109 110
    identifierlist <identifierlist> (70)
        on left: 50 51
        on right: 12 13 14 15 33 50
    identifier <identifier> (71)
        on left: 52
        on right: 50 51
    unaryexpr <exp> (72)
        on left: 53 54
        on right: 35 54
    unary_op <unaryoperator> (73)
        on left: 55 56 57
        on right: 54
    operand <operand> (74)
        on left: 58 59 60
        on right: 65
    literal <literal> (75)
        on left: 61
        on right: 58
    basiclit <literal> (76)
        on left: 62 63
        on right: 61
    operandname <identifier> (77)
        on left: 64
        on right: 59
    primaryexpr <exp> (78)
        on left: 65 66
        on right: 53 66
    arguments <explist> (79)
        on left: 67 68 69
        on right: 66
    block <block> (80)
        on left: 70
        on right: 18 74 95 96 97 98 99 100 101 102
    statementlist <stmlist> (81)
        on left: 71 72
        on right: 70 72
    statement <stm> (82)
        on left: 73 74 75 76 77 78 79
        on right: 71 72
    simplestatement <stm> (83)
        on left: 80 81 82 83 84
        on right: 78 95 96 107 108
    emptystatement <stm> (84)
        on left: 85
        on right: 83
    expressionstatement <stm> (85)
        on left: 86
        on right: 80
    assignment <stm> (86)
        on left: 87
        on right: 81
    assign_op <assignoperator> (87)
        on left: 88 89 90 91 92
        on right: 87
    incdecstatement <stm> (88)
        on left: 93 94
        on right: 82
    ifstatement <stm> (89)
        on left: 95 96 97 98 99
        on right: 75 95 97
    forstatement <stm> (90)
        on left: 100 101 102
        on right: 76
    condition <exp> (91)
        on left: 103
        on right: 100 104 105 106
    forclause <forclause> (92)
        on left: 104 105 106
        on right: 101
    initstatement <stm> (93)
        on left: 107
        on right: 104 105
    poststatement <stm> (94)
        on left: 108
        on right: 104 106
    printstatement <stm> (95)
        on left: 109
        on right: 79
    returnstatement <stm> (96)
        on left: 110 111
        on right: 77


State 0

    0 $accept: • sourcefile $end

    PACKAGE  shift, and go to state 1

    sourcefile     go to state 2
    packageclause  go to state 3


State 1

    5 packageclause: PACKAGE • packagename

    IDENTIFIER  shift, and go to state 4

    packagename  go to state 5


State 2

    0 $accept: sourcefile • $end

    $end  shift, and go to state 6


State 3

    1 sourcefile: packageclause • SEMICOLON topleveldeclarations
    2           | packageclause • SEMICOLON

    SEMICOLON  shift, and go to state 7


State 4

    6 packagename: IDENTIFIER •

    $default  reduce using rule 6 (packagename)


State 5

    5 packageclause: PACKAGE packagename •

    $default  reduce using rule 5 (packageclause)


State 6

    0 $accept: sourcefile $end •

    $default  accept


State 7

    1 sourcefile: packageclause SEMICOLON • topleveldeclarations
    2           | packageclause SEMICOLON •

    VAR   shift, and go to state 8
    FUNC  shift, and go to state 9

    $default  reduce using rule 2 (sourcefile)

    topleveldeclarations  go to state 10
    topleveldecl          go to state 11
    declaration           go to state 12
    vardecl               go to state 13
    functiondeclaration   go to state 14


State 8

   10 vardecl: VAR • varspec
   11        | VAR • LPAREN varspec SEMICOLON RPAREN

    LPAREN      shift, and go to state 15
    IDENTIFIER  shift, and go to state 16

    varspec         go to state 17
    identifierlist  go to state 18
    identifier      go to state 19


State 9

   16 functiondeclaration: FUNC • functionname signature functionbody

    IDENTIFIER  shift, and go to state 20

    functionname  go to state 21


State 10

    1 sourcefile: packageclause SEMICOLON topleveldeclarations •

    $default  reduce using rule 1 (sourcefile)


State 11

    3 topleveldeclarations: topleveldecl • SEMICOLON topleveldeclarations
    4                     | topleveldecl • SEMICOLON

    SEMICOLON  shift, and go to state 22


State 12

    7 topleveldecl: declaration •

    $default  reduce using rule 7 (topleveldecl)


State 13

    9 declaration: vardecl •

    $default  reduce using rule 9 (declaration)


State 14

    8 topleveldecl: functiondeclaration •

    $default  reduce using rule 8 (topleveldecl)


State 15

   11 vardecl: VAR LPAREN • varspec SEMICOLON RPAREN

    IDENTIFIER  shift, and go to state 16

    varspec         go to state 23
    identifierlist  go to state 18
    identifier      go to state 19


State 16

   52 identifier: IDENTIFIER •

    $default  reduce using rule 52 (identifier)


State 17

   10 vardecl: VAR varspec •

    $default  reduce using rule 10 (vardecl)


State 18

   13 varspec: identifierlist • type ASSIGN expressionlist
   14        | identifierlist • type
   15        | identifierlist • ASSIGN expressionlist

    INTEGER     shift, and go to state 24
    BOOLEAN     shift, and go to state 25
    LPAREN      shift, and go to state 26
    ASSIGN      shift, and go to state 27
    IDENTIFIER  shift, and go to state 28

    type      go to state 29
    typename  go to state 30


State 19

   50 identifierlist: identifier • RCOMMA identifierlist
   51               | identifier •

    RCOMMA  shift, and go to state 31

    $default  reduce using rule 51 (identifierlist)


State 20

   17 functionname: IDENTIFIER •

    $default  reduce using rule 17 (functionname)


State 21

   16 functiondeclaration: FUNC functionname • signature functionbody

    LPAREN  shift, and go to state 32

    signature   go to state 33
    parameters  go to state 34


State 22

    3 topleveldeclarations: topleveldecl SEMICOLON • topleveldeclarations
    4                     | topleveldecl SEMICOLON •

    VAR   shift, and go to state 8
    FUNC  shift, and go to state 9

    $default  reduce using rule 4 (topleveldeclarations)

    topleveldeclarations  go to state 35
    topleveldecl          go to state 11
    declaration           go to state 12
    vardecl               go to state 13
    functiondeclaration   go to state 14


State 23

   11 vardecl: VAR LPAREN varspec • SEMICOLON RPAREN

    SEMICOLON  shift, and go to state 36


State 24

   24 typename: INTEGER •

    $default  reduce using rule 24 (typename)


State 25

   25 typename: BOOLEAN •

    $default  reduce using rule 25 (typename)


State 26

   22 type: LPAREN • type RPAREN

    INTEGER     shift, and go to state 24
    BOOLEAN     shift, and go to state 25
    LPAREN      shift, and go to state 26
    IDENTIFIER  shift, and go to state 28

    type      go to state 37
    typename  go to state 30


State 27

   15 varspec: identifierlist ASSIGN • expressionlist

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr            go to state 45
    expressionlist  go to state 46
    unaryexpr       go to state 47
    unary_op        go to state 48
    operand         go to state 49
    literal         go to state 50
    basiclit        go to state 51
    operandname     go to state 52
    primaryexpr     go to state 53


State 28

   23 typename: IDENTIFIER •

    $default  reduce using rule 23 (typename)


State 29

   13 varspec: identifierlist type • ASSIGN expressionlist
   14        | identifierlist type •

    ASSIGN  shift, and go to state 54

    $default  reduce using rule 14 (varspec)


State 30

   21 type: typename •

    $default  reduce using rule 21 (type)


State 31

   50 identifierlist: identifier RCOMMA • identifierlist

    IDENTIFIER  shift, and go to state 16

    identifierlist  go to state 55
    identifier      go to state 19


State 32

   28 parameters: LPAREN • RPAREN
   29           | LPAREN • parameterlist COMMA RPAREN
   30           | LPAREN • parameterlist RPAREN

    INTEGER     shift, and go to state 24
    BOOLEAN     shift, and go to state 25
    LPAREN      shift, and go to state 26
    RPAREN      shift, and go to state 56
    IDENTIFIER  shift, and go to state 57

    type            go to state 58
    typename        go to state 30
    parameterlist   go to state 59
    parameterdecl   go to state 60
    identifierlist  go to state 61
    identifier      go to state 19


State 33

   16 functiondeclaration: FUNC functionname signature • functionbody

    LBRACE  shift, and go to state 62

    functionbody  go to state 63
    block         go to state 64


State 34

   19 signature: parameters • result
   20          | parameters •

    INTEGER     shift, and go to state 24
    BOOLEAN     shift, and go to state 25
    LPAREN      shift, and go to state 65
    IDENTIFIER  shift, and go to state 28

    $default  reduce using rule 20 (signature)

    type        go to state 66
    typename    go to state 30
    result      go to state 67
    parameters  go to state 68


State 35

    3 topleveldeclarations: topleveldecl SEMICOLON topleveldeclarations •

    $default  reduce using rule 3 (topleveldeclarations)


State 36

   11 vardecl: VAR LPAREN varspec SEMICOLON • RPAREN

    RPAREN  shift, and go to state 69


State 37

   22 type: LPAREN type • RPAREN

    RPAREN  shift, and go to state 70


State 38

   60 operand: LPAREN • expr RPAREN

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 71
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53


State 39

   55 unary_op: PLUS •

    $default  reduce using rule 55 (unary_op)


State 40

   57 unary_op: NOT •

    $default  reduce using rule 57 (unary_op)


State 41

   64 operandname: IDENTIFIER •

    $default  reduce using rule 64 (operandname)


State 42

   63 basiclit: BOOLLITERAL •

    $default  reduce using rule 63 (basiclit)


State 43

   62 basiclit: INTLITERAL •

    $default  reduce using rule 62 (basiclit)


State 44

   56 unary_op: UMINUS •

    $default  reduce using rule 56 (unary_op)


State 45

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr
   49 expressionlist: expr •

    PLUS  shift, and go to state 72
    MIN   shift, and go to state 73
    MUL   shift, and go to state 74
    DIV   shift, and go to state 75
    AND   shift, and go to state 76
    OR    shift, and go to state 77
    GT    shift, and go to state 78
    GE    shift, and go to state 79
    LT    shift, and go to state 80
    LE    shift, and go to state 81
    EQ    shift, and go to state 82
    NE    shift, and go to state 83

    $default  reduce using rule 49 (expressionlist)


State 46

   15 varspec: identifierlist ASSIGN expressionlist •
   48 expressionlist: expressionlist • COMMA expr

    COMMA  shift, and go to state 84

    $default  reduce using rule 15 (varspec)


State 47

   35 expr: unaryexpr •

    $default  reduce using rule 35 (expr)


State 48

   54 unaryexpr: unary_op • unaryexpr

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    unaryexpr    go to state 85
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53


State 49

   65 primaryexpr: operand •

    $default  reduce using rule 65 (primaryexpr)


State 50

   58 operand: literal •

    $default  reduce using rule 58 (operand)


State 51

   61 literal: basiclit •

    $default  reduce using rule 61 (literal)


State 52

   59 operand: operandname •

    $default  reduce using rule 59 (operand)


State 53

   53 unaryexpr: primaryexpr •
   66 primaryexpr: primaryexpr • arguments

    LPAREN  shift, and go to state 86

    $default  reduce using rule 53 (unaryexpr)

    arguments  go to state 87


State 54

   13 varspec: identifierlist type ASSIGN • expressionlist

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr            go to state 45
    expressionlist  go to state 88
    unaryexpr       go to state 47
    unary_op        go to state 48
    operand         go to state 49
    literal         go to state 50
    basiclit        go to state 51
    operandname     go to state 52
    primaryexpr     go to state 53


State 55

   50 identifierlist: identifier RCOMMA identifierlist •

    $default  reduce using rule 50 (identifierlist)


State 56

   28 parameters: LPAREN RPAREN •

    $default  reduce using rule 28 (parameters)


State 57

   23 typename: IDENTIFIER •
   52 identifier: IDENTIFIER •

    RPAREN    reduce using rule 23 (typename)
    COMMA     reduce using rule 23 (typename)
    $default  reduce using rule 52 (identifier)


State 58

   34 parameterdecl: type •

    $default  reduce using rule 34 (parameterdecl)


State 59

   29 parameters: LPAREN parameterlist • COMMA RPAREN
   30           | LPAREN parameterlist • RPAREN
   31 parameterlist: parameterlist • COMMA parameterdecl

    RPAREN  shift, and go to state 89
    COMMA   shift, and go to state 90


State 60

   32 parameterlist: parameterdecl •

    $default  reduce using rule 32 (parameterlist)


State 61

   33 parameterdecl: identifierlist • type

    INTEGER     shift, and go to state 24
    BOOLEAN     shift, and go to state 25
    LPAREN      shift, and go to state 26
    IDENTIFIER  shift, and go to state 28

    type      go to state 91
    typename  go to state 30


State 62

   70 block: LBRACE • statementlist RBRACE

    RETURN       shift, and go to state 92
    VAR          shift, and go to state 8
    IF           shift, and go to state 93
    FOR          shift, and go to state 94
    LPAREN       shift, and go to state 38
    LBRACE       shift, and go to state 62
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    PRINT        shift, and go to state 95
    IDENTIFIER   shift, and go to state 96
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    $default  reduce using rule 85 (emptystatement)

    declaration          go to state 97
    vardecl              go to state 13
    shortvardecl         go to state 98
    expr                 go to state 99
    expressionlist       go to state 100
    identifierlist       go to state 101
    identifier           go to state 19
    unaryexpr            go to state 47
    unary_op             go to state 48
    operand              go to state 49
    literal              go to state 50
    basiclit             go to state 51
    operandname          go to state 52
    primaryexpr          go to state 53
    block                go to state 102
    statementlist        go to state 103
    statement            go to state 104
    simplestatement      go to state 105
    emptystatement       go to state 106
    expressionstatement  go to state 107
    assignment           go to state 108
    incdecstatement      go to state 109
    ifstatement          go to state 110
    forstatement         go to state 111
    printstatement       go to state 112
    returnstatement      go to state 113


State 63

   16 functiondeclaration: FUNC functionname signature functionbody •

    $default  reduce using rule 16 (functiondeclaration)


State 64

   18 functionbody: block •

    $default  reduce using rule 18 (functionbody)


State 65

   22 type: LPAREN • type RPAREN
   28 parameters: LPAREN • RPAREN
   29           | LPAREN • parameterlist COMMA RPAREN
   30           | LPAREN • parameterlist RPAREN

    INTEGER     shift, and go to state 24
    BOOLEAN     shift, and go to state 25
    LPAREN      shift, and go to state 26
    RPAREN      shift, and go to state 56
    IDENTIFIER  shift, and go to state 57

    type            go to state 114
    typename        go to state 30
    parameterlist   go to state 59
    parameterdecl   go to state 60
    identifierlist  go to state 61
    identifier      go to state 19


State 66

   27 result: type •

    $default  reduce using rule 27 (result)


State 67

   19 signature: parameters result •

    $default  reduce using rule 19 (signature)


State 68

   26 result: parameters •

    $default  reduce using rule 26 (result)


State 69

   11 vardecl: VAR LPAREN varspec SEMICOLON RPAREN •

    $default  reduce using rule 11 (vardecl)


State 70

   22 type: LPAREN type RPAREN •

    $default  reduce using rule 22 (type)


State 71

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr
   60 operand: LPAREN expr • RPAREN

    RPAREN  shift, and go to state 115
    PLUS    shift, and go to state 72
    MIN     shift, and go to state 73
    MUL     shift, and go to state 74
    DIV     shift, and go to state 75
    AND     shift, and go to state 76
    OR      shift, and go to state 77
    GT      shift, and go to state 78
    GE      shift, and go to state 79
    LT      shift, and go to state 80
    LE      shift, and go to state 81
    EQ      shift, and go to state 82
    NE      shift, and go to state 83


State 72

   44 expr: expr PLUS • expr

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 116
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53


State 73

   45 expr: expr MIN • expr

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 117
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53


State 74

   42 expr: expr MUL • expr

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 118
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53


State 75

   43 expr: expr DIV • expr

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 119
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53


State 76

   47 expr: expr AND • expr

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 120
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53


State 77

   46 expr: expr OR • expr

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 121
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53


State 78

   40 expr: expr GT • expr

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 122
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53


State 79

   41 expr: expr GE • expr

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 123
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53


State 80

   38 expr: expr LT • expr

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 124
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53


State 81

   39 expr: expr LE • expr

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 125
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53


State 82

   36 expr: expr EQ • expr

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 126
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53


State 83

   37 expr: expr NE • expr

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 127
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53


State 84

   48 expressionlist: expressionlist COMMA • expr

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 128
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53


State 85

   54 unaryexpr: unary_op unaryexpr •

    $default  reduce using rule 54 (unaryexpr)


State 86

   67 arguments: LPAREN • RPAREN
   68          | LPAREN • expressionlist RPAREN
   69          | LPAREN • expressionlist RCOMMA RPAREN

    LPAREN       shift, and go to state 38
    RPAREN       shift, and go to state 129
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr            go to state 45
    expressionlist  go to state 130
    unaryexpr       go to state 47
    unary_op        go to state 48
    operand         go to state 49
    literal         go to state 50
    basiclit        go to state 51
    operandname     go to state 52
    primaryexpr     go to state 53


State 87

   66 primaryexpr: primaryexpr arguments •

    $default  reduce using rule 66 (primaryexpr)


State 88

   13 varspec: identifierlist type ASSIGN expressionlist •
   48 expressionlist: expressionlist • COMMA expr

    COMMA  shift, and go to state 84

    $default  reduce using rule 13 (varspec)


State 89

   30 parameters: LPAREN parameterlist RPAREN •

    $default  reduce using rule 30 (parameters)


State 90

   29 parameters: LPAREN parameterlist COMMA • RPAREN
   31 parameterlist: parameterlist COMMA • parameterdecl

    INTEGER     shift, and go to state 24
    BOOLEAN     shift, and go to state 25
    LPAREN      shift, and go to state 26
    RPAREN      shift, and go to state 131
    IDENTIFIER  shift, and go to state 57

    type            go to state 58
    typename        go to state 30
    parameterdecl   go to state 132
    identifierlist  go to state 61
    identifier      go to state 19


State 91

   33 parameterdecl: identifierlist type •

    $default  reduce using rule 33 (parameterdecl)


State 92

  110 returnstatement: RETURN • expressionlist
  111                | RETURN •

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    $default  reduce using rule 111 (returnstatement)

    expr            go to state 45
    expressionlist  go to state 133
    unaryexpr       go to state 47
    unary_op        go to state 48
    operand         go to state 49
    literal         go to state 50
    basiclit        go to state 51
    operandname     go to state 52
    primaryexpr     go to state 53


State 93

   95 ifstatement: IF • simplestatement SEMICOLON expr block ELSE ifstatement
   96            | IF • simplestatement SEMICOLON expr block ELSE block
   97            | IF • expr block ELSE ifstatement
   98            | IF • expr block ELSE block
   99            | IF • expr block

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 96
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    $default  reduce using rule 85 (emptystatement)

    shortvardecl         go to state 98
    expr                 go to state 134
    expressionlist       go to state 100
    identifierlist       go to state 101
    identifier           go to state 19
    unaryexpr            go to state 47
    unary_op             go to state 48
    operand              go to state 49
    literal              go to state 50
    basiclit             go to state 51
    operandname          go to state 52
    primaryexpr          go to state 53
    simplestatement      go to state 135
    emptystatement       go to state 106
    expressionstatement  go to state 107
    assignment           go to state 108
    incdecstatement      go to state 109


State 94

  100 forstatement: FOR • condition block
  101             | FOR • forclause block
  102             | FOR • block

    LPAREN       shift, and go to state 38
    LBRACE       shift, and go to state 62
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 96
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    RSEMICOL     shift, and go to state 136
    UMINUS       shift, and go to state 44

    $default  reduce using rule 85 (emptystatement)

    shortvardecl         go to state 98
    expr                 go to state 137
    expressionlist       go to state 100
    identifierlist       go to state 101
    identifier           go to state 19
    unaryexpr            go to state 47
    unary_op             go to state 48
    operand              go to state 49
    literal              go to state 50
    basiclit             go to state 51
    operandname          go to state 52
    primaryexpr          go to state 53
    block                go to state 138
    simplestatement      go to state 139
    emptystatement       go to state 106
    expressionstatement  go to state 107
    assignment           go to state 108
    incdecstatement      go to state 109
    condition            go to state 140
    forclause            go to state 141
    initstatement        go to state 142


State 95

  109 printstatement: PRINT • LPAREN expressionlist RPAREN

    LPAREN  shift, and go to state 143


State 96

   52 identifier: IDENTIFIER •
   64 operandname: IDENTIFIER •

    SHORTVARASSIGN  reduce using rule 52 (identifier)
    RCOMMA          reduce using rule 52 (identifier)
    $default        reduce using rule 64 (operandname)


State 97

   73 statement: declaration •

    $default  reduce using rule 73 (statement)


State 98

   84 simplestatement: shortvardecl •

    $default  reduce using rule 84 (simplestatement)


State 99

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr
   49 expressionlist: expr •
   86 expressionstatement: expr •
   93 incdecstatement: expr • INC
   94                | expr • DEC

    PLUS  shift, and go to state 72
    MIN   shift, and go to state 73
    MUL   shift, and go to state 74
    DIV   shift, and go to state 75
    AND   shift, and go to state 76
    OR    shift, and go to state 77
    INC   shift, and go to state 144
    DEC   shift, and go to state 145
    GT    shift, and go to state 78
    GE    shift, and go to state 79
    LT    shift, and go to state 80
    LE    shift, and go to state 81
    EQ    shift, and go to state 82
    NE    shift, and go to state 83

    SEMICOLON  reduce using rule 86 (expressionstatement)
    LBRACE     reduce using rule 86 (expressionstatement)
    $default   reduce using rule 49 (expressionlist)


State 100

   48 expressionlist: expressionlist • COMMA expr
   87 assignment: expressionlist • assign_op expressionlist

    PLUSASSIGN  shift, and go to state 146
    MINASSIGN   shift, and go to state 147
    MULASSIGN   shift, and go to state 148
    DIVASSIGN   shift, and go to state 149
    ASSIGN      shift, and go to state 150
    COMMA       shift, and go to state 84

    assign_op  go to state 151


State 101

   12 shortvardecl: identifierlist • SHORTVARASSIGN expressionlist

    SHORTVARASSIGN  shift, and go to state 152


State 102

   74 statement: block •

    $default  reduce using rule 74 (statement)


State 103

   70 block: LBRACE statementlist • RBRACE

    RBRACE  shift, and go to state 153


State 104

   71 statementlist: statement • SEMICOLON
   72              | statement • SEMICOLON statementlist

    SEMICOLON  shift, and go to state 154


State 105

   78 statement: simplestatement •

    $default  reduce using rule 78 (statement)


State 106

   83 simplestatement: emptystatement •

    $default  reduce using rule 83 (simplestatement)


State 107

   80 simplestatement: expressionstatement •

    $default  reduce using rule 80 (simplestatement)


State 108

   81 simplestatement: assignment •

    $default  reduce using rule 81 (simplestatement)


State 109

   82 simplestatement: incdecstatement •

    $default  reduce using rule 82 (simplestatement)


State 110

   75 statement: ifstatement •

    $default  reduce using rule 75 (statement)


State 111

   76 statement: forstatement •

    $default  reduce using rule 76 (statement)


State 112

   79 statement: printstatement •

    $default  reduce using rule 79 (statement)


State 113

   77 statement: returnstatement •

    $default  reduce using rule 77 (statement)


State 114

   22 type: LPAREN type • RPAREN
   34 parameterdecl: type •

    RPAREN  shift, and go to state 70

    RPAREN    [reduce using rule 34 (parameterdecl)]
    $default  reduce using rule 34 (parameterdecl)


State 115

   60 operand: LPAREN expr RPAREN •

    $default  reduce using rule 60 (operand)


State 116

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   44     | expr PLUS expr •
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr

    MUL  shift, and go to state 74
    DIV  shift, and go to state 75

    $default  reduce using rule 44 (expr)


State 117

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   45     | expr MIN expr •
   46     | expr • OR expr
   47     | expr • AND expr

    MUL  shift, and go to state 74
    DIV  shift, and go to state 75

    $default  reduce using rule 45 (expr)


State 118

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   42     | expr MUL expr •
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr

    $default  reduce using rule 42 (expr)


State 119

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   43     | expr DIV expr •
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr

    $default  reduce using rule 43 (expr)


State 120

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr
   47     | expr AND expr •

    PLUS  shift, and go to state 72
    MIN   shift, and go to state 73
    MUL   shift, and go to state 74
    DIV   shift, and go to state 75
    GT    shift, and go to state 78
    GE    shift, and go to state 79
    LT    shift, and go to state 80
    LE    shift, and go to state 81
    EQ    shift, and go to state 82
    NE    shift, and go to state 83

    $default  reduce using rule 47 (expr)


State 121

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   46     | expr OR expr •
   47     | expr • AND expr

    PLUS  shift, and go to state 72
    MIN   shift, and go to state 73
    MUL   shift, and go to state 74
    DIV   shift, and go to state 75
    AND   shift, and go to state 76
    GT    shift, and go to state 78
    GE    shift, and go to state 79
    LT    shift, and go to state 80
    LE    shift, and go to state 81
    EQ    shift, and go to state 82
    NE    shift, and go to state 83

    $default  reduce using rule 46 (expr)


State 122

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   40     | expr GT expr •
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr

    PLUS  shift, and go to state 72
    MIN   shift, and go to state 73
    MUL   shift, and go to state 74
    DIV   shift, and go to state 75

    $default  reduce using rule 40 (expr)


State 123

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   41     | expr GE expr •
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr

    PLUS  shift, and go to state 72
    MIN   shift, and go to state 73
    MUL   shift, and go to state 74
    DIV   shift, and go to state 75

    $default  reduce using rule 41 (expr)


State 124

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   38     | expr LT expr •
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr

    PLUS  shift, and go to state 72
    MIN   shift, and go to state 73
    MUL   shift, and go to state 74
    DIV   shift, and go to state 75

    $default  reduce using rule 38 (expr)


State 125

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   39     | expr LE expr •
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr

    PLUS  shift, and go to state 72
    MIN   shift, and go to state 73
    MUL   shift, and go to state 74
    DIV   shift, and go to state 75

    $default  reduce using rule 39 (expr)


State 126

   36 expr: expr • EQ expr
   36     | expr EQ expr •
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr

    PLUS  shift, and go to state 72
    MIN   shift, and go to state 73
    MUL   shift, and go to state 74
    DIV   shift, and go to state 75

    $default  reduce using rule 36 (expr)


State 127

   36 expr: expr • EQ expr
   37     | expr • NE expr
   37     | expr NE expr •
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr

    PLUS  shift, and go to state 72
    MIN   shift, and go to state 73
    MUL   shift, and go to state 74
    DIV   shift, and go to state 75

    $default  reduce using rule 37 (expr)


State 128

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr
   48 expressionlist: expressionlist COMMA expr •

    PLUS  shift, and go to state 72
    MIN   shift, and go to state 73
    MUL   shift, and go to state 74
    DIV   shift, and go to state 75
    AND   shift, and go to state 76
    OR    shift, and go to state 77
    GT    shift, and go to state 78
    GE    shift, and go to state 79
    LT    shift, and go to state 80
    LE    shift, and go to state 81
    EQ    shift, and go to state 82
    NE    shift, and go to state 83

    $default  reduce using rule 48 (expressionlist)


State 129

   67 arguments: LPAREN RPAREN •

    $default  reduce using rule 67 (arguments)


State 130

   48 expressionlist: expressionlist • COMMA expr
   68 arguments: LPAREN expressionlist • RPAREN
   69          | LPAREN expressionlist • RCOMMA RPAREN

    RPAREN  shift, and go to state 155
    COMMA   shift, and go to state 84
    RCOMMA  shift, and go to state 156


State 131

   29 parameters: LPAREN parameterlist COMMA RPAREN •

    $default  reduce using rule 29 (parameters)


State 132

   31 parameterlist: parameterlist COMMA parameterdecl •

    $default  reduce using rule 31 (parameterlist)


State 133

   48 expressionlist: expressionlist • COMMA expr
  110 returnstatement: RETURN expressionlist •

    COMMA  shift, and go to state 84

    $default  reduce using rule 110 (returnstatement)


State 134

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr
   49 expressionlist: expr •
   86 expressionstatement: expr •
   93 incdecstatement: expr • INC
   94                | expr • DEC
   97 ifstatement: IF expr • block ELSE ifstatement
   98            | IF expr • block ELSE block
   99            | IF expr • block

    LBRACE  shift, and go to state 62
    PLUS    shift, and go to state 72
    MIN     shift, and go to state 73
    MUL     shift, and go to state 74
    DIV     shift, and go to state 75
    AND     shift, and go to state 76
    OR      shift, and go to state 77
    INC     shift, and go to state 144
    DEC     shift, and go to state 145
    GT      shift, and go to state 78
    GE      shift, and go to state 79
    LT      shift, and go to state 80
    LE      shift, and go to state 81
    EQ      shift, and go to state 82
    NE      shift, and go to state 83

    SEMICOLON  reduce using rule 86 (expressionstatement)
    $default   reduce using rule 49 (expressionlist)

    block  go to state 157


State 135

   95 ifstatement: IF simplestatement • SEMICOLON expr block ELSE ifstatement
   96            | IF simplestatement • SEMICOLON expr block ELSE block

    SEMICOLON  shift, and go to state 158


State 136

  106 forclause: RSEMICOL • condition RSEMICOL poststatement

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 159
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53
    condition    go to state 160


State 137

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr
   49 expressionlist: expr •
   86 expressionstatement: expr •
   93 incdecstatement: expr • INC
   94                | expr • DEC
  103 condition: expr •

    PLUS  shift, and go to state 72
    MIN   shift, and go to state 73
    MUL   shift, and go to state 74
    DIV   shift, and go to state 75
    AND   shift, and go to state 76
    OR    shift, and go to state 77
    INC   shift, and go to state 144
    DEC   shift, and go to state 145
    GT    shift, and go to state 78
    GE    shift, and go to state 79
    LT    shift, and go to state 80
    LE    shift, and go to state 81
    EQ    shift, and go to state 82
    NE    shift, and go to state 83

    SEMICOLON  reduce using rule 86 (expressionstatement)
    LBRACE     reduce using rule 103 (condition)
    $default   reduce using rule 49 (expressionlist)


State 138

  102 forstatement: FOR block •

    $default  reduce using rule 102 (forstatement)


State 139

  107 initstatement: simplestatement •

    $default  reduce using rule 107 (initstatement)


State 140

  100 forstatement: FOR condition • block

    LBRACE  shift, and go to state 62

    block  go to state 161


State 141

  101 forstatement: FOR forclause • block

    LBRACE  shift, and go to state 62

    block  go to state 162


State 142

  104 forclause: initstatement • SEMICOLON condition SEMICOLON poststatement
  105          | initstatement • SEMICOLON condition RSEMICOL

    SEMICOLON  shift, and go to state 163


State 143

  109 printstatement: PRINT LPAREN • expressionlist RPAREN

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr            go to state 45
    expressionlist  go to state 164
    unaryexpr       go to state 47
    unary_op        go to state 48
    operand         go to state 49
    literal         go to state 50
    basiclit        go to state 51
    operandname     go to state 52
    primaryexpr     go to state 53


State 144

   93 incdecstatement: expr INC •

    $default  reduce using rule 93 (incdecstatement)


State 145

   94 incdecstatement: expr DEC •

    $default  reduce using rule 94 (incdecstatement)


State 146

   89 assign_op: PLUSASSIGN •

    $default  reduce using rule 89 (assign_op)


State 147

   90 assign_op: MINASSIGN •

    $default  reduce using rule 90 (assign_op)


State 148

   91 assign_op: MULASSIGN •

    $default  reduce using rule 91 (assign_op)


State 149

   92 assign_op: DIVASSIGN •

    $default  reduce using rule 92 (assign_op)


State 150

   88 assign_op: ASSIGN •

    $default  reduce using rule 88 (assign_op)


State 151

   87 assignment: expressionlist assign_op • expressionlist

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr            go to state 45
    expressionlist  go to state 165
    unaryexpr       go to state 47
    unary_op        go to state 48
    operand         go to state 49
    literal         go to state 50
    basiclit        go to state 51
    operandname     go to state 52
    primaryexpr     go to state 53


State 152

   12 shortvardecl: identifierlist SHORTVARASSIGN • expressionlist

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr            go to state 45
    expressionlist  go to state 166
    unaryexpr       go to state 47
    unary_op        go to state 48
    operand         go to state 49
    literal         go to state 50
    basiclit        go to state 51
    operandname     go to state 52
    primaryexpr     go to state 53


State 153

   70 block: LBRACE statementlist RBRACE •

    $default  reduce using rule 70 (block)


State 154

   71 statementlist: statement SEMICOLON •
   72              | statement SEMICOLON • statementlist

    RETURN       shift, and go to state 92
    VAR          shift, and go to state 8
    IF           shift, and go to state 93
    FOR          shift, and go to state 94
    LPAREN       shift, and go to state 38
    LBRACE       shift, and go to state 62
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    PRINT        shift, and go to state 95
    IDENTIFIER   shift, and go to state 96
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    SEMICOLON  reduce using rule 85 (emptystatement)
    $default   reduce using rule 71 (statementlist)

    declaration          go to state 97
    vardecl              go to state 13
    shortvardecl         go to state 98
    expr                 go to state 99
    expressionlist       go to state 100
    identifierlist       go to state 101
    identifier           go to state 19
    unaryexpr            go to state 47
    unary_op             go to state 48
    operand              go to state 49
    literal              go to state 50
    basiclit             go to state 51
    operandname          go to state 52
    primaryexpr          go to state 53
    block                go to state 102
    statementlist        go to state 167
    statement            go to state 104
    simplestatement      go to state 105
    emptystatement       go to state 106
    expressionstatement  go to state 107
    assignment           go to state 108
    incdecstatement      go to state 109
    ifstatement          go to state 110
    forstatement         go to state 111
    printstatement       go to state 112
    returnstatement      go to state 113


State 155

   68 arguments: LPAREN expressionlist RPAREN •

    $default  reduce using rule 68 (arguments)


State 156

   69 arguments: LPAREN expressionlist RCOMMA • RPAREN

    RPAREN  shift, and go to state 168


State 157

   97 ifstatement: IF expr block • ELSE ifstatement
   98            | IF expr block • ELSE block
   99            | IF expr block •

    ELSE  shift, and go to state 169

    $default  reduce using rule 99 (ifstatement)


State 158

   95 ifstatement: IF simplestatement SEMICOLON • expr block ELSE ifstatement
   96            | IF simplestatement SEMICOLON • expr block ELSE block

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 170
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53


State 159

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr
  103 condition: expr •

    PLUS  shift, and go to state 72
    MIN   shift, and go to state 73
    MUL   shift, and go to state 74
    DIV   shift, and go to state 75
    AND   shift, and go to state 76
    OR    shift, and go to state 77
    GT    shift, and go to state 78
    GE    shift, and go to state 79
    LT    shift, and go to state 80
    LE    shift, and go to state 81
    EQ    shift, and go to state 82
    NE    shift, and go to state 83

    $default  reduce using rule 103 (condition)


State 160

  106 forclause: RSEMICOL condition • RSEMICOL poststatement

    RSEMICOL  shift, and go to state 171


State 161

  100 forstatement: FOR condition block •

    $default  reduce using rule 100 (forstatement)


State 162

  101 forstatement: FOR forclause block •

    $default  reduce using rule 101 (forstatement)


State 163

  104 forclause: initstatement SEMICOLON • condition SEMICOLON poststatement
  105          | initstatement SEMICOLON • condition RSEMICOL

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 159
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53
    condition    go to state 172


State 164

   48 expressionlist: expressionlist • COMMA expr
  109 printstatement: PRINT LPAREN expressionlist • RPAREN

    RPAREN  shift, and go to state 173
    COMMA   shift, and go to state 84


State 165

   48 expressionlist: expressionlist • COMMA expr
   87 assignment: expressionlist assign_op expressionlist •

    COMMA  shift, and go to state 84

    $default  reduce using rule 87 (assignment)


State 166

   12 shortvardecl: identifierlist SHORTVARASSIGN expressionlist •
   48 expressionlist: expressionlist • COMMA expr

    COMMA  shift, and go to state 84

    $default  reduce using rule 12 (shortvardecl)


State 167

   72 statementlist: statement SEMICOLON statementlist •

    $default  reduce using rule 72 (statementlist)


State 168

   69 arguments: LPAREN expressionlist RCOMMA RPAREN •

    $default  reduce using rule 69 (arguments)


State 169

   97 ifstatement: IF expr block ELSE • ifstatement
   98            | IF expr block ELSE • block

    IF      shift, and go to state 93
    LBRACE  shift, and go to state 62

    block        go to state 174
    ifstatement  go to state 175


State 170

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr
   95 ifstatement: IF simplestatement SEMICOLON expr • block ELSE ifstatement
   96            | IF simplestatement SEMICOLON expr • block ELSE block

    LBRACE  shift, and go to state 62
    PLUS    shift, and go to state 72
    MIN     shift, and go to state 73
    MUL     shift, and go to state 74
    DIV     shift, and go to state 75
    AND     shift, and go to state 76
    OR      shift, and go to state 77
    GT      shift, and go to state 78
    GE      shift, and go to state 79
    LT      shift, and go to state 80
    LE      shift, and go to state 81
    EQ      shift, and go to state 82
    NE      shift, and go to state 83

    block  go to state 176


State 171

  106 forclause: RSEMICOL condition RSEMICOL • poststatement

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 96
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    $default  reduce using rule 85 (emptystatement)

    shortvardecl         go to state 98
    expr                 go to state 99
    expressionlist       go to state 100
    identifierlist       go to state 101
    identifier           go to state 19
    unaryexpr            go to state 47
    unary_op             go to state 48
    operand              go to state 49
    literal              go to state 50
    basiclit             go to state 51
    operandname          go to state 52
    primaryexpr          go to state 53
    simplestatement      go to state 177
    emptystatement       go to state 106
    expressionstatement  go to state 107
    assignment           go to state 108
    incdecstatement      go to state 109
    poststatement        go to state 178


State 172

  104 forclause: initstatement SEMICOLON condition • SEMICOLON poststatement
  105          | initstatement SEMICOLON condition • RSEMICOL

    SEMICOLON  shift, and go to state 179
    RSEMICOL   shift, and go to state 180


State 173

  109 printstatement: PRINT LPAREN expressionlist RPAREN •

    $default  reduce using rule 109 (printstatement)


State 174

   98 ifstatement: IF expr block ELSE block •

    $default  reduce using rule 98 (ifstatement)


State 175

   97 ifstatement: IF expr block ELSE ifstatement •

    $default  reduce using rule 97 (ifstatement)


State 176

   95 ifstatement: IF simplestatement SEMICOLON expr block • ELSE ifstatement
   96            | IF simplestatement SEMICOLON expr block • ELSE block

    ELSE  shift, and go to state 181


State 177

  108 poststatement: simplestatement •

    $default  reduce using rule 108 (poststatement)


State 178

  106 forclause: RSEMICOL condition RSEMICOL poststatement •

    $default  reduce using rule 106 (forclause)


State 179

  104 forclause: initstatement SEMICOLON condition SEMICOLON • poststatement

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 96
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    $default  reduce using rule 85 (emptystatement)

    shortvardecl         go to state 98
    expr                 go to state 99
    expressionlist       go to state 100
    identifierlist       go to state 101
    identifier           go to state 19
    unaryexpr            go to state 47
    unary_op             go to state 48
    operand              go to state 49
    literal              go to state 50
    basiclit             go to state 51
    operandname          go to state 52
    primaryexpr          go to state 53
    simplestatement      go to state 177
    emptystatement       go to state 106
    expressionstatement  go to state 107
    assignment           go to state 108
    incdecstatement      go to state 109
    poststatement        go to state 182


State 180

  105 forclause: initstatement SEMICOLON condition RSEMICOL •

    $default  reduce using rule 105 (forclause)


State 181

   95 ifstatement: IF simplestatement SEMICOLON expr block ELSE • ifstatement
   96            | IF simplestatement SEMICOLON expr block ELSE • block

    IF      shift, and go to state 93
    LBRACE  shift, and go to state 62

    block        go to state 183
    ifstatement  go to state 184


State 182

  104 forclause: initstatement SEMICOLON condition SEMICOLON poststatement •

    $default  reduce using rule 104 (forclause)


State 183

   96 ifstatement: IF simplestatement SEMICOLON expr block ELSE block •

    $default  reduce using rule 96 (ifstatement)


State 184

   95 ifstatement: IF simplestatement SEMICOLON expr block ELSE ifstatement •

    $default  reduce using rule 95 (ifstatement)
