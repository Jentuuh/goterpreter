Terminals unused in grammar

    NEWLINE
    IMPORT


State 56 conflicts: 1 shift/reduce
State 94 conflicts: 1 shift/reduce
State 111 conflicts: 1 shift/reduce


Grammar

    0 $accept: sourcefile $end

    1 sourcefile: packageclause SEMICOLON topleveldeclarations
    2           | packageclause SEMICOLON

    3 topleveldeclarations: topleveldecl SEMICOLON topleveldeclarations
    4                     | topleveldecl SEMICOLON

    5 packageclause: PACKAGE packagename

    6 packagename: IDENTIFIER

    7 topleveldecl: declaration
    8             | functiondeclaration

    9 declaration: vardecl

   10 vardecl: VAR varspec
   11        | VAR LPAREN varspec SEMICOLON RPAREN

   12 shortvardecl: identifierlist SHORTVARASSIGN expressionlist

   13 varspec: identifierlist type ASSIGN expressionlist
   14        | identifierlist type
   15        | identifierlist ASSIGN expressionlist

   16 functiondeclaration: FUNC functionname signature functionbody

   17 functionname: IDENTIFIER

   18 functionbody: block

   19 signature: parameters result
   20          | parameters

   21 type: typename
   22     | LPAREN type RPAREN

   23 typename: IDENTIFIER
   24         | INTEGER
   25         | BOOLEAN

   26 result: parameters
   27       | type

   28 parameters: LPAREN RPAREN
   29           | LPAREN parameterlist COMMA RPAREN
   30           | LPAREN parameterlist RPAREN

   31 parameterlist: parameterlist COMMA parameterdecl
   32              | parameterdecl

   33 parameterdecl: identifierlist type
   34              | type

   35 expr: unaryexpr
   36     | expr EQ expr
   37     | expr NE expr
   38     | expr LT expr
   39     | expr LE expr
   40     | expr GT expr
   41     | expr GE expr
   42     | expr MUL expr
   43     | expr DIV expr
   44     | expr PLUS expr
   45     | expr MIN expr
   46     | expr OR expr
   47     | expr AND expr

   48 expressionlist: expressionlist COMMA expr
   49               | expr

   50 identifierlist: IDENTIFIER COMMA identifierlist
   51               | IDENTIFIER

   52 unaryexpr: primaryexpr
   53          | unary_op unaryexpr

   54 unary_op: PLUS
   55         | UMINUS
   56         | NOT

   57 operand: literal
   58        | operandname
   59        | LPAREN expr RPAREN

   60 literal: basiclit

   61 basiclit: INTLITERAL
   62         | BOOLLITERAL

   63 operandname: IDENTIFIER

   64 primaryexpr: operand
   65            | primaryexpr arguments SEMICOLON

   66 arguments: LPAREN RPAREN
   67          | LPAREN expressionlist RPAREN
   68          | LPAREN expressionlist RCOMMA RPAREN

   69 block: LBRACE statementlist RBRACE

   70 statementlist: statement SEMICOLON
   71              | statement SEMICOLON statementlist

   72 statement: declaration
   73          | block
   74          | ifstatement
   75          | forstatement
   76          | returnstatement
   77          | simplestatement

   78 simplestatement: expressionstatement
   79                | assignment
   80                | incdecstatement
   81                | emptystatement
   82                | shortvardecl

   83 emptystatement: ε

   84 expressionstatement: expr

   85 assignment: expressionlist assign_op expressionlist

   86 assign_op: ASSIGN
   87          | PLUSASSIGN
   88          | MINASSIGN
   89          | MULASSIGN
   90          | DIVASSIGN

   91 incdecstatement: expr INC
   92                | expr DEC

   93 ifstatement: IF simplestatement SEMICOLON expr block ELSE ifstatement
   94            | IF simplestatement SEMICOLON expr block ELSE block
   95            | IF expr block ELSE ifstatement
   96            | IF expr block ELSE block
   97            | IF expr block

   98 forstatement: FOR condition block
   99             | FOR forclause block
  100             | FOR block

  101 condition: expr

  102 forclause: initstatement SEMICOLON condition SEMICOLON poststatement

  103 initstatement: simplestatement

  104 poststatement: simplestatement

  105 returnstatement: RETURN expressionlist
  106                | RETURN


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    SEMICOLON (258) 1 2 3 4 11 65 70 71 93 94 102
    INTEGER (259) 24
    BOOLEAN (260) 25
    PACKAGE (261) 5
    RETURN (262) 105 106
    VAR (263) 10 11
    IF (264) 93 94 95 96 97
    FOR (265) 98 99 100
    LPAREN (266) 11 22 28 29 30 59 66 67 68
    RPAREN (267) 11 22 28 29 30 59 66 67 68
    LBRACE (268) 69
    RBRACE (269) 69
    PLUS (270) 44 54
    MIN (271) 45
    MUL (272) 42
    DIV (273) 43
    PLUSASSIGN (274) 87
    MINASSIGN (275) 88
    MULASSIGN (276) 89
    DIVASSIGN (277) 90
    AND (278) 47
    OR (279) 46
    NOT (280) 56
    INC (281) 91
    DEC (282) 92
    GT (283) 40
    GE (284) 41
    LT (285) 38
    LE (286) 39
    EQ (287) 36
    NE (288) 37
    ASSIGN (289) 13 15 86
    FUNC (290) 16
    NEWLINE (291)
    IMPORT (292)
    COMMA (293) 29 31 48 50
    ELSE (294) 93 94 95 96
    SHORTVARASSIGN (295) 12
    IDENTIFIER <id> (296) 6 17 23 50 51 63
    BOOLLITERAL <boollit> (297) 62
    INTLITERAL <intlit> (298) 61
    RCOMMA (299) 68
    UMINUS (300) 55


Nonterminals, with rules where they appear

    $accept (46)
        on left: 0
    sourcefile <srcfile> (47)
        on left: 1 2
        on right: 0
    topleveldeclarations <decllist> (48)
        on left: 3 4
        on right: 1 3
    packageclause <packageclause> (49)
        on left: 5
        on right: 1 2
    packagename <identifier> (50)
        on left: 6
        on right: 5
    topleveldecl <toplvldecl> (51)
        on left: 7 8
        on right: 3 4
    declaration <toplvldecl> (52)
        on left: 9
        on right: 7 72
    vardecl <toplvldecl> (53)
        on left: 10 11
        on right: 9
    shortvardecl (54)
        on left: 12
        on right: 82
    varspec <varspec> (55)
        on left: 13 14 15
        on right: 10 11
    functiondeclaration <toplvldecl> (56)
        on left: 16
        on right: 8
    functionname <identifier> (57)
        on left: 17
        on right: 16
    functionbody <block> (58)
        on left: 18
        on right: 16
    signature <signature> (59)
        on left: 19 20
        on right: 16
    type <type> (60)
        on left: 21 22
        on right: 13 14 22 27 33 34
    typename <type> (61)
        on left: 23 24 25
        on right: 21
    result <result> (62)
        on left: 26 27
        on right: 19
    parameters <paramlist> (63)
        on left: 28 29 30
        on right: 19 20 26
    parameterlist <paramlist> (64)
        on left: 31 32
        on right: 29 30 31
    parameterdecl <paramdecl> (65)
        on left: 33 34
        on right: 31 32
    expr <exp> (66)
        on left: 35 36 37 38 39 40 41 42 43 44 45 46 47
        on right: 36 37 38 39 40 41 42 43 44 45 46 47 48 49 59 84 91 92 93 94 95 96 97 101
    expressionlist <explist> (67)
        on left: 48 49
        on right: 12 13 15 48 67 68 85 105
    identifierlist <identifierlist> (68)
        on left: 50 51
        on right: 12 13 14 15 33 50
    unaryexpr <exp> (69)
        on left: 52 53
        on right: 35 53
    unary_op <unaryoperator> (70)
        on left: 54 55 56
        on right: 53
    operand <operand> (71)
        on left: 57 58 59
        on right: 64
    literal <literal> (72)
        on left: 60
        on right: 57
    basiclit <literal> (73)
        on left: 61 62
        on right: 60
    operandname <identifier> (74)
        on left: 63
        on right: 58
    primaryexpr <exp> (75)
        on left: 64 65
        on right: 52 65
    arguments <explist> (76)
        on left: 66 67 68
        on right: 65
    block <block> (77)
        on left: 69
        on right: 18 73 93 94 95 96 97 98 99 100
    statementlist <stmlist> (78)
        on left: 70 71
        on right: 69 71
    statement <stm> (79)
        on left: 72 73 74 75 76 77
        on right: 70 71
    simplestatement <stm> (80)
        on left: 78 79 80 81 82
        on right: 77 93 94 103 104
    emptystatement <stm> (81)
        on left: 83
        on right: 81
    expressionstatement <stm> (82)
        on left: 84
        on right: 78
    assignment <stm> (83)
        on left: 85
        on right: 79
    assign_op <assignoperator> (84)
        on left: 86 87 88 89 90
        on right: 85
    incdecstatement <stm> (85)
        on left: 91 92
        on right: 80
    ifstatement <stm> (86)
        on left: 93 94 95 96 97
        on right: 74 93 95
    forstatement <stm> (87)
        on left: 98 99 100
        on right: 75
    condition <exp> (88)
        on left: 101
        on right: 98 102
    forclause <forclause> (89)
        on left: 102
        on right: 99
    initstatement <stm> (90)
        on left: 103
        on right: 102
    poststatement <stm> (91)
        on left: 104
        on right: 102
    returnstatement <stm> (92)
        on left: 105 106
        on right: 76


State 0

    0 $accept: • sourcefile $end

    PACKAGE  shift, and go to state 1

    sourcefile     go to state 2
    packageclause  go to state 3


State 1

    5 packageclause: PACKAGE • packagename

    IDENTIFIER  shift, and go to state 4

    packagename  go to state 5


State 2

    0 $accept: sourcefile • $end

    $end  shift, and go to state 6


State 3

    1 sourcefile: packageclause • SEMICOLON topleveldeclarations
    2           | packageclause • SEMICOLON

    SEMICOLON  shift, and go to state 7


State 4

    6 packagename: IDENTIFIER •

    $default  reduce using rule 6 (packagename)


State 5

    5 packageclause: PACKAGE packagename •

    $default  reduce using rule 5 (packageclause)


State 6

    0 $accept: sourcefile $end •

    $default  accept


State 7

    1 sourcefile: packageclause SEMICOLON • topleveldeclarations
    2           | packageclause SEMICOLON •

    VAR   shift, and go to state 8
    FUNC  shift, and go to state 9

    $default  reduce using rule 2 (sourcefile)

    topleveldeclarations  go to state 10
    topleveldecl          go to state 11
    declaration           go to state 12
    vardecl               go to state 13
    functiondeclaration   go to state 14


State 8

   10 vardecl: VAR • varspec
   11        | VAR • LPAREN varspec SEMICOLON RPAREN

    LPAREN      shift, and go to state 15
    IDENTIFIER  shift, and go to state 16

    varspec         go to state 17
    identifierlist  go to state 18


State 9

   16 functiondeclaration: FUNC • functionname signature functionbody

    IDENTIFIER  shift, and go to state 19

    functionname  go to state 20


State 10

    1 sourcefile: packageclause SEMICOLON topleveldeclarations •

    $default  reduce using rule 1 (sourcefile)


State 11

    3 topleveldeclarations: topleveldecl • SEMICOLON topleveldeclarations
    4                     | topleveldecl • SEMICOLON

    SEMICOLON  shift, and go to state 21


State 12

    7 topleveldecl: declaration •

    $default  reduce using rule 7 (topleveldecl)


State 13

    9 declaration: vardecl •

    $default  reduce using rule 9 (declaration)


State 14

    8 topleveldecl: functiondeclaration •

    $default  reduce using rule 8 (topleveldecl)


State 15

   11 vardecl: VAR LPAREN • varspec SEMICOLON RPAREN

    IDENTIFIER  shift, and go to state 16

    varspec         go to state 22
    identifierlist  go to state 18


State 16

   50 identifierlist: IDENTIFIER • COMMA identifierlist
   51               | IDENTIFIER •

    COMMA  shift, and go to state 23

    $default  reduce using rule 51 (identifierlist)


State 17

   10 vardecl: VAR varspec •

    $default  reduce using rule 10 (vardecl)


State 18

   13 varspec: identifierlist • type ASSIGN expressionlist
   14        | identifierlist • type
   15        | identifierlist • ASSIGN expressionlist

    INTEGER     shift, and go to state 24
    BOOLEAN     shift, and go to state 25
    LPAREN      shift, and go to state 26
    ASSIGN      shift, and go to state 27
    IDENTIFIER  shift, and go to state 28

    type      go to state 29
    typename  go to state 30


State 19

   17 functionname: IDENTIFIER •

    $default  reduce using rule 17 (functionname)


State 20

   16 functiondeclaration: FUNC functionname • signature functionbody

    LPAREN  shift, and go to state 31

    signature   go to state 32
    parameters  go to state 33


State 21

    3 topleveldeclarations: topleveldecl SEMICOLON • topleveldeclarations
    4                     | topleveldecl SEMICOLON •

    VAR   shift, and go to state 8
    FUNC  shift, and go to state 9

    $default  reduce using rule 4 (topleveldeclarations)

    topleveldeclarations  go to state 34
    topleveldecl          go to state 11
    declaration           go to state 12
    vardecl               go to state 13
    functiondeclaration   go to state 14


State 22

   11 vardecl: VAR LPAREN varspec • SEMICOLON RPAREN

    SEMICOLON  shift, and go to state 35


State 23

   50 identifierlist: IDENTIFIER COMMA • identifierlist

    IDENTIFIER  shift, and go to state 16

    identifierlist  go to state 36


State 24

   24 typename: INTEGER •

    $default  reduce using rule 24 (typename)


State 25

   25 typename: BOOLEAN •

    $default  reduce using rule 25 (typename)


State 26

   22 type: LPAREN • type RPAREN

    INTEGER     shift, and go to state 24
    BOOLEAN     shift, and go to state 25
    LPAREN      shift, and go to state 26
    IDENTIFIER  shift, and go to state 28

    type      go to state 37
    typename  go to state 30


State 27

   15 varspec: identifierlist ASSIGN • expressionlist

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr            go to state 45
    expressionlist  go to state 46
    unaryexpr       go to state 47
    unary_op        go to state 48
    operand         go to state 49
    literal         go to state 50
    basiclit        go to state 51
    operandname     go to state 52
    primaryexpr     go to state 53


State 28

   23 typename: IDENTIFIER •

    $default  reduce using rule 23 (typename)


State 29

   13 varspec: identifierlist type • ASSIGN expressionlist
   14        | identifierlist type •

    ASSIGN  shift, and go to state 54

    $default  reduce using rule 14 (varspec)


State 30

   21 type: typename •

    $default  reduce using rule 21 (type)


State 31

   28 parameters: LPAREN • RPAREN
   29           | LPAREN • parameterlist COMMA RPAREN
   30           | LPAREN • parameterlist RPAREN

    INTEGER     shift, and go to state 24
    BOOLEAN     shift, and go to state 25
    LPAREN      shift, and go to state 26
    RPAREN      shift, and go to state 55
    IDENTIFIER  shift, and go to state 56

    type            go to state 57
    typename        go to state 30
    parameterlist   go to state 58
    parameterdecl   go to state 59
    identifierlist  go to state 60


State 32

   16 functiondeclaration: FUNC functionname signature • functionbody

    LBRACE  shift, and go to state 61

    functionbody  go to state 62
    block         go to state 63


State 33

   19 signature: parameters • result
   20          | parameters •

    INTEGER     shift, and go to state 24
    BOOLEAN     shift, and go to state 25
    LPAREN      shift, and go to state 64
    IDENTIFIER  shift, and go to state 28

    $default  reduce using rule 20 (signature)

    type        go to state 65
    typename    go to state 30
    result      go to state 66
    parameters  go to state 67


State 34

    3 topleveldeclarations: topleveldecl SEMICOLON topleveldeclarations •

    $default  reduce using rule 3 (topleveldeclarations)


State 35

   11 vardecl: VAR LPAREN varspec SEMICOLON • RPAREN

    RPAREN  shift, and go to state 68


State 36

   50 identifierlist: IDENTIFIER COMMA identifierlist •

    $default  reduce using rule 50 (identifierlist)


State 37

   22 type: LPAREN type • RPAREN

    RPAREN  shift, and go to state 69


State 38

   59 operand: LPAREN • expr RPAREN

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 70
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53


State 39

   54 unary_op: PLUS •

    $default  reduce using rule 54 (unary_op)


State 40

   56 unary_op: NOT •

    $default  reduce using rule 56 (unary_op)


State 41

   63 operandname: IDENTIFIER •

    $default  reduce using rule 63 (operandname)


State 42

   62 basiclit: BOOLLITERAL •

    $default  reduce using rule 62 (basiclit)


State 43

   61 basiclit: INTLITERAL •

    $default  reduce using rule 61 (basiclit)


State 44

   55 unary_op: UMINUS •

    $default  reduce using rule 55 (unary_op)


State 45

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr
   49 expressionlist: expr •

    PLUS  shift, and go to state 71
    MIN   shift, and go to state 72
    MUL   shift, and go to state 73
    DIV   shift, and go to state 74
    AND   shift, and go to state 75
    OR    shift, and go to state 76
    GT    shift, and go to state 77
    GE    shift, and go to state 78
    LT    shift, and go to state 79
    LE    shift, and go to state 80
    EQ    shift, and go to state 81
    NE    shift, and go to state 82

    $default  reduce using rule 49 (expressionlist)


State 46

   15 varspec: identifierlist ASSIGN expressionlist •
   48 expressionlist: expressionlist • COMMA expr

    COMMA  shift, and go to state 83

    $default  reduce using rule 15 (varspec)


State 47

   35 expr: unaryexpr •

    $default  reduce using rule 35 (expr)


State 48

   53 unaryexpr: unary_op • unaryexpr

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    unaryexpr    go to state 84
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53


State 49

   64 primaryexpr: operand •

    $default  reduce using rule 64 (primaryexpr)


State 50

   57 operand: literal •

    $default  reduce using rule 57 (operand)


State 51

   60 literal: basiclit •

    $default  reduce using rule 60 (literal)


State 52

   58 operand: operandname •

    $default  reduce using rule 58 (operand)


State 53

   52 unaryexpr: primaryexpr •
   65 primaryexpr: primaryexpr • arguments SEMICOLON

    LPAREN  shift, and go to state 85

    $default  reduce using rule 52 (unaryexpr)

    arguments  go to state 86


State 54

   13 varspec: identifierlist type ASSIGN • expressionlist

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr            go to state 45
    expressionlist  go to state 87
    unaryexpr       go to state 47
    unary_op        go to state 48
    operand         go to state 49
    literal         go to state 50
    basiclit        go to state 51
    operandname     go to state 52
    primaryexpr     go to state 53


State 55

   28 parameters: LPAREN RPAREN •

    $default  reduce using rule 28 (parameters)


State 56

   23 typename: IDENTIFIER •
   50 identifierlist: IDENTIFIER • COMMA identifierlist
   51               | IDENTIFIER •

    COMMA  shift, and go to state 23

    RPAREN    reduce using rule 23 (typename)
    COMMA     [reduce using rule 23 (typename)]
    $default  reduce using rule 51 (identifierlist)


State 57

   34 parameterdecl: type •

    $default  reduce using rule 34 (parameterdecl)


State 58

   29 parameters: LPAREN parameterlist • COMMA RPAREN
   30           | LPAREN parameterlist • RPAREN
   31 parameterlist: parameterlist • COMMA parameterdecl

    RPAREN  shift, and go to state 88
    COMMA   shift, and go to state 89


State 59

   32 parameterlist: parameterdecl •

    $default  reduce using rule 32 (parameterlist)


State 60

   33 parameterdecl: identifierlist • type

    INTEGER     shift, and go to state 24
    BOOLEAN     shift, and go to state 25
    LPAREN      shift, and go to state 26
    IDENTIFIER  shift, and go to state 28

    type      go to state 90
    typename  go to state 30


State 61

   69 block: LBRACE • statementlist RBRACE

    RETURN       shift, and go to state 91
    VAR          shift, and go to state 8
    IF           shift, and go to state 92
    FOR          shift, and go to state 93
    LPAREN       shift, and go to state 38
    LBRACE       shift, and go to state 61
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 94
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    $default  reduce using rule 83 (emptystatement)

    declaration          go to state 95
    vardecl              go to state 13
    shortvardecl         go to state 96
    expr                 go to state 97
    expressionlist       go to state 98
    identifierlist       go to state 99
    unaryexpr            go to state 47
    unary_op             go to state 48
    operand              go to state 49
    literal              go to state 50
    basiclit             go to state 51
    operandname          go to state 52
    primaryexpr          go to state 53
    block                go to state 100
    statementlist        go to state 101
    statement            go to state 102
    simplestatement      go to state 103
    emptystatement       go to state 104
    expressionstatement  go to state 105
    assignment           go to state 106
    incdecstatement      go to state 107
    ifstatement          go to state 108
    forstatement         go to state 109
    returnstatement      go to state 110


State 62

   16 functiondeclaration: FUNC functionname signature functionbody •

    $default  reduce using rule 16 (functiondeclaration)


State 63

   18 functionbody: block •

    $default  reduce using rule 18 (functionbody)


State 64

   22 type: LPAREN • type RPAREN
   28 parameters: LPAREN • RPAREN
   29           | LPAREN • parameterlist COMMA RPAREN
   30           | LPAREN • parameterlist RPAREN

    INTEGER     shift, and go to state 24
    BOOLEAN     shift, and go to state 25
    LPAREN      shift, and go to state 26
    RPAREN      shift, and go to state 55
    IDENTIFIER  shift, and go to state 56

    type            go to state 111
    typename        go to state 30
    parameterlist   go to state 58
    parameterdecl   go to state 59
    identifierlist  go to state 60


State 65

   27 result: type •

    $default  reduce using rule 27 (result)


State 66

   19 signature: parameters result •

    $default  reduce using rule 19 (signature)


State 67

   26 result: parameters •

    $default  reduce using rule 26 (result)


State 68

   11 vardecl: VAR LPAREN varspec SEMICOLON RPAREN •

    $default  reduce using rule 11 (vardecl)


State 69

   22 type: LPAREN type RPAREN •

    $default  reduce using rule 22 (type)


State 70

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr
   59 operand: LPAREN expr • RPAREN

    RPAREN  shift, and go to state 112
    PLUS    shift, and go to state 71
    MIN     shift, and go to state 72
    MUL     shift, and go to state 73
    DIV     shift, and go to state 74
    AND     shift, and go to state 75
    OR      shift, and go to state 76
    GT      shift, and go to state 77
    GE      shift, and go to state 78
    LT      shift, and go to state 79
    LE      shift, and go to state 80
    EQ      shift, and go to state 81
    NE      shift, and go to state 82


State 71

   44 expr: expr PLUS • expr

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 113
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53


State 72

   45 expr: expr MIN • expr

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 114
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53


State 73

   42 expr: expr MUL • expr

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 115
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53


State 74

   43 expr: expr DIV • expr

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 116
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53


State 75

   47 expr: expr AND • expr

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 117
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53


State 76

   46 expr: expr OR • expr

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 118
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53


State 77

   40 expr: expr GT • expr

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 119
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53


State 78

   41 expr: expr GE • expr

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 120
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53


State 79

   38 expr: expr LT • expr

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 121
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53


State 80

   39 expr: expr LE • expr

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 122
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53


State 81

   36 expr: expr EQ • expr

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 123
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53


State 82

   37 expr: expr NE • expr

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 124
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53


State 83

   48 expressionlist: expressionlist COMMA • expr

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 125
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53


State 84

   53 unaryexpr: unary_op unaryexpr •

    $default  reduce using rule 53 (unaryexpr)


State 85

   66 arguments: LPAREN • RPAREN
   67          | LPAREN • expressionlist RPAREN
   68          | LPAREN • expressionlist RCOMMA RPAREN

    LPAREN       shift, and go to state 38
    RPAREN       shift, and go to state 126
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr            go to state 45
    expressionlist  go to state 127
    unaryexpr       go to state 47
    unary_op        go to state 48
    operand         go to state 49
    literal         go to state 50
    basiclit        go to state 51
    operandname     go to state 52
    primaryexpr     go to state 53


State 86

   65 primaryexpr: primaryexpr arguments • SEMICOLON

    SEMICOLON  shift, and go to state 128


State 87

   13 varspec: identifierlist type ASSIGN expressionlist •
   48 expressionlist: expressionlist • COMMA expr

    COMMA  shift, and go to state 83

    $default  reduce using rule 13 (varspec)


State 88

   30 parameters: LPAREN parameterlist RPAREN •

    $default  reduce using rule 30 (parameters)


State 89

   29 parameters: LPAREN parameterlist COMMA • RPAREN
   31 parameterlist: parameterlist COMMA • parameterdecl

    INTEGER     shift, and go to state 24
    BOOLEAN     shift, and go to state 25
    LPAREN      shift, and go to state 26
    RPAREN      shift, and go to state 129
    IDENTIFIER  shift, and go to state 56

    type            go to state 57
    typename        go to state 30
    parameterdecl   go to state 130
    identifierlist  go to state 60


State 90

   33 parameterdecl: identifierlist type •

    $default  reduce using rule 33 (parameterdecl)


State 91

  105 returnstatement: RETURN • expressionlist
  106                | RETURN •

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    $default  reduce using rule 106 (returnstatement)

    expr            go to state 45
    expressionlist  go to state 131
    unaryexpr       go to state 47
    unary_op        go to state 48
    operand         go to state 49
    literal         go to state 50
    basiclit        go to state 51
    operandname     go to state 52
    primaryexpr     go to state 53


State 92

   93 ifstatement: IF • simplestatement SEMICOLON expr block ELSE ifstatement
   94            | IF • simplestatement SEMICOLON expr block ELSE block
   95            | IF • expr block ELSE ifstatement
   96            | IF • expr block ELSE block
   97            | IF • expr block

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 94
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    $default  reduce using rule 83 (emptystatement)

    shortvardecl         go to state 96
    expr                 go to state 132
    expressionlist       go to state 98
    identifierlist       go to state 99
    unaryexpr            go to state 47
    unary_op             go to state 48
    operand              go to state 49
    literal              go to state 50
    basiclit             go to state 51
    operandname          go to state 52
    primaryexpr          go to state 53
    simplestatement      go to state 133
    emptystatement       go to state 104
    expressionstatement  go to state 105
    assignment           go to state 106
    incdecstatement      go to state 107


State 93

   98 forstatement: FOR • condition block
   99             | FOR • forclause block
  100             | FOR • block

    LPAREN       shift, and go to state 38
    LBRACE       shift, and go to state 61
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 94
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    $default  reduce using rule 83 (emptystatement)

    shortvardecl         go to state 96
    expr                 go to state 134
    expressionlist       go to state 98
    identifierlist       go to state 99
    unaryexpr            go to state 47
    unary_op             go to state 48
    operand              go to state 49
    literal              go to state 50
    basiclit             go to state 51
    operandname          go to state 52
    primaryexpr          go to state 53
    block                go to state 135
    simplestatement      go to state 136
    emptystatement       go to state 104
    expressionstatement  go to state 105
    assignment           go to state 106
    incdecstatement      go to state 107
    condition            go to state 137
    forclause            go to state 138
    initstatement        go to state 139


State 94

   50 identifierlist: IDENTIFIER • COMMA identifierlist
   51               | IDENTIFIER •
   63 operandname: IDENTIFIER •

    COMMA  shift, and go to state 23

    COMMA           [reduce using rule 63 (operandname)]
    SHORTVARASSIGN  reduce using rule 51 (identifierlist)
    $default        reduce using rule 63 (operandname)


State 95

   72 statement: declaration •

    $default  reduce using rule 72 (statement)


State 96

   82 simplestatement: shortvardecl •

    $default  reduce using rule 82 (simplestatement)


State 97

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr
   49 expressionlist: expr •
   84 expressionstatement: expr •
   91 incdecstatement: expr • INC
   92                | expr • DEC

    PLUS  shift, and go to state 71
    MIN   shift, and go to state 72
    MUL   shift, and go to state 73
    DIV   shift, and go to state 74
    AND   shift, and go to state 75
    OR    shift, and go to state 76
    INC   shift, and go to state 140
    DEC   shift, and go to state 141
    GT    shift, and go to state 77
    GE    shift, and go to state 78
    LT    shift, and go to state 79
    LE    shift, and go to state 80
    EQ    shift, and go to state 81
    NE    shift, and go to state 82

    SEMICOLON  reduce using rule 84 (expressionstatement)
    LBRACE     reduce using rule 84 (expressionstatement)
    $default   reduce using rule 49 (expressionlist)


State 98

   48 expressionlist: expressionlist • COMMA expr
   85 assignment: expressionlist • assign_op expressionlist

    PLUSASSIGN  shift, and go to state 142
    MINASSIGN   shift, and go to state 143
    MULASSIGN   shift, and go to state 144
    DIVASSIGN   shift, and go to state 145
    ASSIGN      shift, and go to state 146
    COMMA       shift, and go to state 83

    assign_op  go to state 147


State 99

   12 shortvardecl: identifierlist • SHORTVARASSIGN expressionlist

    SHORTVARASSIGN  shift, and go to state 148


State 100

   73 statement: block •

    $default  reduce using rule 73 (statement)


State 101

   69 block: LBRACE statementlist • RBRACE

    RBRACE  shift, and go to state 149


State 102

   70 statementlist: statement • SEMICOLON
   71              | statement • SEMICOLON statementlist

    SEMICOLON  shift, and go to state 150


State 103

   77 statement: simplestatement •

    $default  reduce using rule 77 (statement)


State 104

   81 simplestatement: emptystatement •

    $default  reduce using rule 81 (simplestatement)


State 105

   78 simplestatement: expressionstatement •

    $default  reduce using rule 78 (simplestatement)


State 106

   79 simplestatement: assignment •

    $default  reduce using rule 79 (simplestatement)


State 107

   80 simplestatement: incdecstatement •

    $default  reduce using rule 80 (simplestatement)


State 108

   74 statement: ifstatement •

    $default  reduce using rule 74 (statement)


State 109

   75 statement: forstatement •

    $default  reduce using rule 75 (statement)


State 110

   76 statement: returnstatement •

    $default  reduce using rule 76 (statement)


State 111

   22 type: LPAREN type • RPAREN
   34 parameterdecl: type •

    RPAREN  shift, and go to state 69

    RPAREN    [reduce using rule 34 (parameterdecl)]
    $default  reduce using rule 34 (parameterdecl)


State 112

   59 operand: LPAREN expr RPAREN •

    $default  reduce using rule 59 (operand)


State 113

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   44     | expr PLUS expr •
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr

    MUL  shift, and go to state 73
    DIV  shift, and go to state 74

    $default  reduce using rule 44 (expr)


State 114

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   45     | expr MIN expr •
   46     | expr • OR expr
   47     | expr • AND expr

    MUL  shift, and go to state 73
    DIV  shift, and go to state 74

    $default  reduce using rule 45 (expr)


State 115

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   42     | expr MUL expr •
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr

    $default  reduce using rule 42 (expr)


State 116

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   43     | expr DIV expr •
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr

    $default  reduce using rule 43 (expr)


State 117

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr
   47     | expr AND expr •

    PLUS  shift, and go to state 71
    MIN   shift, and go to state 72
    MUL   shift, and go to state 73
    DIV   shift, and go to state 74
    GT    shift, and go to state 77
    GE    shift, and go to state 78
    LT    shift, and go to state 79
    LE    shift, and go to state 80
    EQ    shift, and go to state 81
    NE    shift, and go to state 82

    $default  reduce using rule 47 (expr)


State 118

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   46     | expr OR expr •
   47     | expr • AND expr

    PLUS  shift, and go to state 71
    MIN   shift, and go to state 72
    MUL   shift, and go to state 73
    DIV   shift, and go to state 74
    AND   shift, and go to state 75
    GT    shift, and go to state 77
    GE    shift, and go to state 78
    LT    shift, and go to state 79
    LE    shift, and go to state 80
    EQ    shift, and go to state 81
    NE    shift, and go to state 82

    $default  reduce using rule 46 (expr)


State 119

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   40     | expr GT expr •
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr

    PLUS  shift, and go to state 71
    MIN   shift, and go to state 72
    MUL   shift, and go to state 73
    DIV   shift, and go to state 74

    $default  reduce using rule 40 (expr)


State 120

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   41     | expr GE expr •
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr

    PLUS  shift, and go to state 71
    MIN   shift, and go to state 72
    MUL   shift, and go to state 73
    DIV   shift, and go to state 74

    $default  reduce using rule 41 (expr)


State 121

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   38     | expr LT expr •
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr

    PLUS  shift, and go to state 71
    MIN   shift, and go to state 72
    MUL   shift, and go to state 73
    DIV   shift, and go to state 74

    $default  reduce using rule 38 (expr)


State 122

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   39     | expr LE expr •
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr

    PLUS  shift, and go to state 71
    MIN   shift, and go to state 72
    MUL   shift, and go to state 73
    DIV   shift, and go to state 74

    $default  reduce using rule 39 (expr)


State 123

   36 expr: expr • EQ expr
   36     | expr EQ expr •
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr

    PLUS  shift, and go to state 71
    MIN   shift, and go to state 72
    MUL   shift, and go to state 73
    DIV   shift, and go to state 74

    $default  reduce using rule 36 (expr)


State 124

   36 expr: expr • EQ expr
   37     | expr • NE expr
   37     | expr NE expr •
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr

    PLUS  shift, and go to state 71
    MIN   shift, and go to state 72
    MUL   shift, and go to state 73
    DIV   shift, and go to state 74

    $default  reduce using rule 37 (expr)


State 125

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr
   48 expressionlist: expressionlist COMMA expr •

    PLUS  shift, and go to state 71
    MIN   shift, and go to state 72
    MUL   shift, and go to state 73
    DIV   shift, and go to state 74
    AND   shift, and go to state 75
    OR    shift, and go to state 76
    GT    shift, and go to state 77
    GE    shift, and go to state 78
    LT    shift, and go to state 79
    LE    shift, and go to state 80
    EQ    shift, and go to state 81
    NE    shift, and go to state 82

    $default  reduce using rule 48 (expressionlist)


State 126

   66 arguments: LPAREN RPAREN •

    $default  reduce using rule 66 (arguments)


State 127

   48 expressionlist: expressionlist • COMMA expr
   67 arguments: LPAREN expressionlist • RPAREN
   68          | LPAREN expressionlist • RCOMMA RPAREN

    RPAREN  shift, and go to state 151
    COMMA   shift, and go to state 83
    RCOMMA  shift, and go to state 152


State 128

   65 primaryexpr: primaryexpr arguments SEMICOLON •

    $default  reduce using rule 65 (primaryexpr)


State 129

   29 parameters: LPAREN parameterlist COMMA RPAREN •

    $default  reduce using rule 29 (parameters)


State 130

   31 parameterlist: parameterlist COMMA parameterdecl •

    $default  reduce using rule 31 (parameterlist)


State 131

   48 expressionlist: expressionlist • COMMA expr
  105 returnstatement: RETURN expressionlist •

    COMMA  shift, and go to state 83

    $default  reduce using rule 105 (returnstatement)


State 132

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr
   49 expressionlist: expr •
   84 expressionstatement: expr •
   91 incdecstatement: expr • INC
   92                | expr • DEC
   95 ifstatement: IF expr • block ELSE ifstatement
   96            | IF expr • block ELSE block
   97            | IF expr • block

    LBRACE  shift, and go to state 61
    PLUS    shift, and go to state 71
    MIN     shift, and go to state 72
    MUL     shift, and go to state 73
    DIV     shift, and go to state 74
    AND     shift, and go to state 75
    OR      shift, and go to state 76
    INC     shift, and go to state 140
    DEC     shift, and go to state 141
    GT      shift, and go to state 77
    GE      shift, and go to state 78
    LT      shift, and go to state 79
    LE      shift, and go to state 80
    EQ      shift, and go to state 81
    NE      shift, and go to state 82

    SEMICOLON  reduce using rule 84 (expressionstatement)
    $default   reduce using rule 49 (expressionlist)

    block  go to state 153


State 133

   93 ifstatement: IF simplestatement • SEMICOLON expr block ELSE ifstatement
   94            | IF simplestatement • SEMICOLON expr block ELSE block

    SEMICOLON  shift, and go to state 154


State 134

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr
   49 expressionlist: expr •
   84 expressionstatement: expr •
   91 incdecstatement: expr • INC
   92                | expr • DEC
  101 condition: expr •

    PLUS  shift, and go to state 71
    MIN   shift, and go to state 72
    MUL   shift, and go to state 73
    DIV   shift, and go to state 74
    AND   shift, and go to state 75
    OR    shift, and go to state 76
    INC   shift, and go to state 140
    DEC   shift, and go to state 141
    GT    shift, and go to state 77
    GE    shift, and go to state 78
    LT    shift, and go to state 79
    LE    shift, and go to state 80
    EQ    shift, and go to state 81
    NE    shift, and go to state 82

    SEMICOLON  reduce using rule 84 (expressionstatement)
    LBRACE     reduce using rule 101 (condition)
    $default   reduce using rule 49 (expressionlist)


State 135

  100 forstatement: FOR block •

    $default  reduce using rule 100 (forstatement)


State 136

  103 initstatement: simplestatement •

    $default  reduce using rule 103 (initstatement)


State 137

   98 forstatement: FOR condition • block

    LBRACE  shift, and go to state 61

    block  go to state 155


State 138

   99 forstatement: FOR forclause • block

    LBRACE  shift, and go to state 61

    block  go to state 156


State 139

  102 forclause: initstatement • SEMICOLON condition SEMICOLON poststatement

    SEMICOLON  shift, and go to state 157


State 140

   91 incdecstatement: expr INC •

    $default  reduce using rule 91 (incdecstatement)


State 141

   92 incdecstatement: expr DEC •

    $default  reduce using rule 92 (incdecstatement)


State 142

   87 assign_op: PLUSASSIGN •

    $default  reduce using rule 87 (assign_op)


State 143

   88 assign_op: MINASSIGN •

    $default  reduce using rule 88 (assign_op)


State 144

   89 assign_op: MULASSIGN •

    $default  reduce using rule 89 (assign_op)


State 145

   90 assign_op: DIVASSIGN •

    $default  reduce using rule 90 (assign_op)


State 146

   86 assign_op: ASSIGN •

    $default  reduce using rule 86 (assign_op)


State 147

   85 assignment: expressionlist assign_op • expressionlist

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr            go to state 45
    expressionlist  go to state 158
    unaryexpr       go to state 47
    unary_op        go to state 48
    operand         go to state 49
    literal         go to state 50
    basiclit        go to state 51
    operandname     go to state 52
    primaryexpr     go to state 53


State 148

   12 shortvardecl: identifierlist SHORTVARASSIGN • expressionlist

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr            go to state 45
    expressionlist  go to state 159
    unaryexpr       go to state 47
    unary_op        go to state 48
    operand         go to state 49
    literal         go to state 50
    basiclit        go to state 51
    operandname     go to state 52
    primaryexpr     go to state 53


State 149

   69 block: LBRACE statementlist RBRACE •

    $default  reduce using rule 69 (block)


State 150

   70 statementlist: statement SEMICOLON •
   71              | statement SEMICOLON • statementlist

    RETURN       shift, and go to state 91
    VAR          shift, and go to state 8
    IF           shift, and go to state 92
    FOR          shift, and go to state 93
    LPAREN       shift, and go to state 38
    LBRACE       shift, and go to state 61
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 94
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    SEMICOLON  reduce using rule 83 (emptystatement)
    $default   reduce using rule 70 (statementlist)

    declaration          go to state 95
    vardecl              go to state 13
    shortvardecl         go to state 96
    expr                 go to state 97
    expressionlist       go to state 98
    identifierlist       go to state 99
    unaryexpr            go to state 47
    unary_op             go to state 48
    operand              go to state 49
    literal              go to state 50
    basiclit             go to state 51
    operandname          go to state 52
    primaryexpr          go to state 53
    block                go to state 100
    statementlist        go to state 160
    statement            go to state 102
    simplestatement      go to state 103
    emptystatement       go to state 104
    expressionstatement  go to state 105
    assignment           go to state 106
    incdecstatement      go to state 107
    ifstatement          go to state 108
    forstatement         go to state 109
    returnstatement      go to state 110


State 151

   67 arguments: LPAREN expressionlist RPAREN •

    $default  reduce using rule 67 (arguments)


State 152

   68 arguments: LPAREN expressionlist RCOMMA • RPAREN

    RPAREN  shift, and go to state 161


State 153

   95 ifstatement: IF expr block • ELSE ifstatement
   96            | IF expr block • ELSE block
   97            | IF expr block •

    ELSE  shift, and go to state 162

    $default  reduce using rule 97 (ifstatement)


State 154

   93 ifstatement: IF simplestatement SEMICOLON • expr block ELSE ifstatement
   94            | IF simplestatement SEMICOLON • expr block ELSE block

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 163
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53


State 155

   98 forstatement: FOR condition block •

    $default  reduce using rule 98 (forstatement)


State 156

   99 forstatement: FOR forclause block •

    $default  reduce using rule 99 (forstatement)


State 157

  102 forclause: initstatement SEMICOLON • condition SEMICOLON poststatement

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    expr         go to state 164
    unaryexpr    go to state 47
    unary_op     go to state 48
    operand      go to state 49
    literal      go to state 50
    basiclit     go to state 51
    operandname  go to state 52
    primaryexpr  go to state 53
    condition    go to state 165


State 158

   48 expressionlist: expressionlist • COMMA expr
   85 assignment: expressionlist assign_op expressionlist •

    COMMA  shift, and go to state 83

    $default  reduce using rule 85 (assignment)


State 159

   12 shortvardecl: identifierlist SHORTVARASSIGN expressionlist •
   48 expressionlist: expressionlist • COMMA expr

    COMMA  shift, and go to state 83

    $default  reduce using rule 12 (shortvardecl)


State 160

   71 statementlist: statement SEMICOLON statementlist •

    $default  reduce using rule 71 (statementlist)


State 161

   68 arguments: LPAREN expressionlist RCOMMA RPAREN •

    $default  reduce using rule 68 (arguments)


State 162

   95 ifstatement: IF expr block ELSE • ifstatement
   96            | IF expr block ELSE • block

    IF      shift, and go to state 92
    LBRACE  shift, and go to state 61

    block        go to state 166
    ifstatement  go to state 167


State 163

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr
   93 ifstatement: IF simplestatement SEMICOLON expr • block ELSE ifstatement
   94            | IF simplestatement SEMICOLON expr • block ELSE block

    LBRACE  shift, and go to state 61
    PLUS    shift, and go to state 71
    MIN     shift, and go to state 72
    MUL     shift, and go to state 73
    DIV     shift, and go to state 74
    AND     shift, and go to state 75
    OR      shift, and go to state 76
    GT      shift, and go to state 77
    GE      shift, and go to state 78
    LT      shift, and go to state 79
    LE      shift, and go to state 80
    EQ      shift, and go to state 81
    NE      shift, and go to state 82

    block  go to state 168


State 164

   36 expr: expr • EQ expr
   37     | expr • NE expr
   38     | expr • LT expr
   39     | expr • LE expr
   40     | expr • GT expr
   41     | expr • GE expr
   42     | expr • MUL expr
   43     | expr • DIV expr
   44     | expr • PLUS expr
   45     | expr • MIN expr
   46     | expr • OR expr
   47     | expr • AND expr
  101 condition: expr •

    PLUS  shift, and go to state 71
    MIN   shift, and go to state 72
    MUL   shift, and go to state 73
    DIV   shift, and go to state 74
    AND   shift, and go to state 75
    OR    shift, and go to state 76
    GT    shift, and go to state 77
    GE    shift, and go to state 78
    LT    shift, and go to state 79
    LE    shift, and go to state 80
    EQ    shift, and go to state 81
    NE    shift, and go to state 82

    $default  reduce using rule 101 (condition)


State 165

  102 forclause: initstatement SEMICOLON condition • SEMICOLON poststatement

    SEMICOLON  shift, and go to state 169


State 166

   96 ifstatement: IF expr block ELSE block •

    $default  reduce using rule 96 (ifstatement)


State 167

   95 ifstatement: IF expr block ELSE ifstatement •

    $default  reduce using rule 95 (ifstatement)


State 168

   93 ifstatement: IF simplestatement SEMICOLON expr block • ELSE ifstatement
   94            | IF simplestatement SEMICOLON expr block • ELSE block

    ELSE  shift, and go to state 170


State 169

  102 forclause: initstatement SEMICOLON condition SEMICOLON • poststatement

    LPAREN       shift, and go to state 38
    PLUS         shift, and go to state 39
    NOT          shift, and go to state 40
    IDENTIFIER   shift, and go to state 94
    BOOLLITERAL  shift, and go to state 42
    INTLITERAL   shift, and go to state 43
    UMINUS       shift, and go to state 44

    $default  reduce using rule 83 (emptystatement)

    shortvardecl         go to state 96
    expr                 go to state 97
    expressionlist       go to state 98
    identifierlist       go to state 99
    unaryexpr            go to state 47
    unary_op             go to state 48
    operand              go to state 49
    literal              go to state 50
    basiclit             go to state 51
    operandname          go to state 52
    primaryexpr          go to state 53
    simplestatement      go to state 171
    emptystatement       go to state 104
    expressionstatement  go to state 105
    assignment           go to state 106
    incdecstatement      go to state 107
    poststatement        go to state 172


State 170

   93 ifstatement: IF simplestatement SEMICOLON expr block ELSE • ifstatement
   94            | IF simplestatement SEMICOLON expr block ELSE • block

    IF      shift, and go to state 92
    LBRACE  shift, and go to state 61

    block        go to state 173
    ifstatement  go to state 174


State 171

  104 poststatement: simplestatement •

    $default  reduce using rule 104 (poststatement)


State 172

  102 forclause: initstatement SEMICOLON condition SEMICOLON poststatement •

    $default  reduce using rule 102 (forclause)


State 173

   94 ifstatement: IF simplestatement SEMICOLON expr block ELSE block •

    $default  reduce using rule 94 (ifstatement)


State 174

   93 ifstatement: IF simplestatement SEMICOLON expr block ELSE ifstatement •

    $default  reduce using rule 93 (ifstatement)
